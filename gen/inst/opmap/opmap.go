package opmap

import "github.com/wdamron/arm"

func mat(op uint8, xs ...uint8) arm.EncOp {
	if len(xs) != int(arm.MatcherArgCounts[op]) {
		panic("invalid args for " + arm.MatchName[op])
	}
	m := arm.EncOp{Op: op}
	copy(m.X[:], xs)
	return m
}

func cmd(op uint8, xs ...uint8) arm.EncOp {
	if len(xs) != int(arm.CmdArgCounts[op]) {
		panic("invalid args for " + arm.CmdName[op])
	}
	cmd := arm.EncOp{Op: op}
	copy(cmd.X[:], xs)
	return cmd
}

func alt2(offset uint8, a0, a1 uint16) arm.EncOp {
	cmd := arm.EncOp{Op: arm.CmdUAlt2}
	cmd.X[0] = offset
	for i, alt := range arm.Alts2 {
		if alt == [2]uint16{a0, a1} {
			cmd.X[1] = uint8(i)
			return cmd
		}
	}
	panic("invalid alt2")
}

func alt4(offset uint8, a0, a1, a2, a3 uint16) arm.EncOp {
	cmd := arm.EncOp{Op: arm.CmdUAlt4}
	cmd.X[0] = offset
	for i, alt := range arm.Alts4 {
		if alt == [4]uint16{a0, a1, a2, a3} {
			cmd.X[1] = uint8(i)
			return cmd
		}
	}
	panic("invalid alt4")
}

type Encoding struct {
	Op    uint32
	Match []arm.EncOp
	Cmds  []arm.EncOp
}

// See https://github.com/CensoredUsername/dynasm-rs/blob/e6248cc55917e96b7ce7a590c0c93f61c609471e/plugin/src/arch/aarch64/opmap.rs
// (v1.2.3)
var EncMap = map[string][]Encoding{
	"abs": {
		{Op: 0b01011110111000001011100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001110001000001011100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000001011100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000001011100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110111000001011100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
	},
	"adc": {
		{Op: 0b00011010000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b10011010000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"adcs": {
		{Op: 0b00111010000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b10111010000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"add": {
		// ADD (shifted register)
		{Op: 0b00001011000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW), mat(arm.MatEnd), mat(arm.MatMod, arm.SymShifts)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRotates), cmd(arm.CmdUbits, 10, 5)}},
		{Op: 0b10001011000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatX), mat(arm.MatEnd), mat(arm.MatMod, arm.SymShifts)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRotates), cmd(arm.CmdUbits, 10, 6)}},
		// ADD (extended register)
		{Op: 0b00001011001000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatWSP), mat(arm.MatWSP), mat(arm.MatW), mat(arm.MatEnd), mat(arm.MatMod, arm.SymExtends)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdExtendsW), cmd(arm.CmdUrange, 10, 0, 4)}},
		{Op: 0b10001011001000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatXSP), mat(arm.MatXSP), mat(arm.MatW), mat(arm.MatEnd), mat(arm.MatMod, arm.SymExtendsW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdExtendsX), cmd(arm.CmdUrange, 10, 0, 4)}},
		{Op: 0b10001011001000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatXSP), mat(arm.MatXSP), mat(arm.MatX), mat(arm.MatEnd), mat(arm.MatMod, arm.SymExtendsX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdExtendsX), cmd(arm.CmdUrange, 10, 0, 4)}},
		// ADD (immediate)
		{Op: 0b00010001000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatWSP), mat(arm.MatWSP), mat(arm.MatImm), mat(arm.MatEnd), mat(arm.MatLitMod, arm.SymLSL)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 10, 12), alt2(22, 0, 12)}},
		{Op: 0b10010001000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatXSP), mat(arm.MatXSP), mat(arm.MatImm), mat(arm.MatEnd), mat(arm.MatLitMod, arm.SymLSL)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 10, 12), alt2(22, 0, 12)}},
		// ADD (vector)
		{Op: 0b01011110111000001000010000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00001110001000001000010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000001000010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000001000010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110111000001000010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"addhn": {
		{Op: 0b00001110001000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.BYTE), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00001110011000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00001110101000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"addhn2": {
		{Op: 0b01001110001000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01001110011000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01001110101000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"addp": {
		// ADDP (scalar)
		{Op: 0b01011110111100011011100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		// ADDP (vector)
		{Op: 0b00001110001000001011110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000001011110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000001011110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110111000001011110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"adds": {
		// ADDS (shifted register)
		{Op: 0b00101011000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW), mat(arm.MatEnd), mat(arm.MatMod, arm.SymShifts)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRotates), cmd(arm.CmdUbits, 10, 5)}},
		{Op: 0b10101011000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatX), mat(arm.MatEnd), mat(arm.MatMod, arm.SymShifts)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRotates), cmd(arm.CmdUbits, 10, 6)}},
		// ADDS (extended register)
		{Op: 0b00101011001000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatWSP), mat(arm.MatW), mat(arm.MatEnd), mat(arm.MatMod, arm.SymExtends)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdExtendsW), cmd(arm.CmdUrange, 10, 0, 4)}},
		{Op: 0b10101011001000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatXSP), mat(arm.MatW), mat(arm.MatEnd), mat(arm.MatMod, arm.SymExtendsW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdExtendsX), cmd(arm.CmdUrange, 10, 0, 4)}},
		{Op: 0b10101011001000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatXSP), mat(arm.MatX), mat(arm.MatEnd), mat(arm.MatMod, arm.SymExtendsX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdExtendsX), cmd(arm.CmdUrange, 10, 0, 4)}},
		// ADDS (immediate)
		{Op: 0b00110001000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatWSP), mat(arm.MatImm), mat(arm.MatEnd), mat(arm.MatLitMod, arm.SymLSL)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 10, 12), alt2(22, 0, 12)}},
		{Op: 0b10110001000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatXSP), mat(arm.MatImm), mat(arm.MatEnd), mat(arm.MatLitMod, arm.SymLSL)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 10, 12), alt2(22, 0, 12)}},
	},
	"addv": {
		{Op: 0b00001110001100011011100000000000,
			Match: []arm.EncOp{mat(arm.MatB), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011100011011100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101100011011100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
	},
	"adr": {
		{Op: 0b00010000000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdOffset, arm.RelAdr)}},
	},
	"adrp": {
		{Op: 0b10010000000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdOffset, arm.RelAdrp)}},
	},
	"aesd": {
		{Op: 0b01001110001010000101100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.BYTE), 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"aese": {
		{Op: 0b01001110001010000100100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.BYTE), 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"aesimc": {
		{Op: 0b01001110001010000111100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.BYTE), 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"aesmc": {
		{Op: 0b01001110001010000110100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.BYTE), 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"and": {
		// AND (vector)
		{Op: 0b00001110001000000001110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		// AND (immediate)
		{Op: 0b00010010000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatWSP), mat(arm.MatW), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSpecial, 10, arm.SpecialImmLogical32)}},
		{Op: 0b10010010000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatXSP), mat(arm.MatX), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSpecial, 10, arm.SpecialImmLogical64)}},
		// AND (shifted register)
		{Op: 0b00001010000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW), mat(arm.MatEnd), mat(arm.MatMod, arm.SymRotates)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRotates), cmd(arm.CmdUbits, 10, 5)}},
		{Op: 0b10001010000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatX), mat(arm.MatEnd), mat(arm.MatMod, arm.SymRotates)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRotates), cmd(arm.CmdUbits, 10, 6)}},
	},
	"ands": {
		// ANDS (immediate)
		{Op: 0b01110010000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSpecial, 10, arm.SpecialImmLogical32)}},
		{Op: 0b11110010000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSpecial, 10, arm.SpecialImmLogical64)}},
		// ANDS (shifted register)
		{Op: 0b01101010000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW), mat(arm.MatEnd), mat(arm.MatMod, arm.SymRotates)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRotates), cmd(arm.CmdUbits, 10, 5)}},
		{Op: 0b11101010000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatX), mat(arm.MatEnd), mat(arm.MatMod, arm.SymRotates)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRotates), cmd(arm.CmdUbits, 10, 6)}},
	},
	"asr": {
		// ASR (register)
		{Op: 0b00011010110000000010100000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b10011010110000000010100000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		// ASR (immediate)
		{Op: 0b00010011000000000111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 5)}},
		{Op: 0b10010011010000001111110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 6)}},
	},
	"asrv": {
		{Op: 0b00011010110000000010100000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b10011010110000000010100000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"at": {
		{Op: 0b11010101000010000111100000000000,
			Match: []arm.EncOp{mat(arm.MatSymbol), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdLitList, 5, arm.SymATOPS), cmd(arm.CmdR0)}},
	},
	"autda": {
		{Op: 0b11011010110000010001100000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatXSP)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"autdb": {
		{Op: 0b11011010110000010001110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatXSP)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"autdza": {
		{Op: 0b11011010110000010011101111100000,
			Match: []arm.EncOp{mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0)}},
	},
	"autdzb": {
		{Op: 0b11011010110000010011111111100000,
			Match: []arm.EncOp{mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0)}},
	},
	"autia": {
		{Op: 0b11011010110000010001000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatXSP)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"autia1716": {
		{Op: 0b11010101000000110010000110011111,
			Match: []arm.EncOp{},
			Cmds:  []arm.EncOp{}},
	},
	"autiasp": {
		{Op: 0b11010101000000110010001110111111,
			Match: []arm.EncOp{},
			Cmds:  []arm.EncOp{}},
	},
	"autiaz": {
		{Op: 0b11010101000000110010001110011111,
			Match: []arm.EncOp{},
			Cmds:  []arm.EncOp{}},
	},
	"autib": {
		{Op: 0b11011010110000010001010000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatXSP)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"autib1716": {
		{Op: 0b11010101000000110010000111011111,
			Match: []arm.EncOp{},
			Cmds:  []arm.EncOp{}},
	},
	"autibsp": {
		{Op: 0b11010101000000110010001111111111,
			Match: []arm.EncOp{},
			Cmds:  []arm.EncOp{}},
	},
	"autibz": {
		{Op: 0b11010101000000110010001111011111,
			Match: []arm.EncOp{},
			Cmds:  []arm.EncOp{}},
	},
	"autiza": {
		{Op: 0b11011010110000010011001111100000,
			Match: []arm.EncOp{mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0)}},
	},
	"autizb": {
		{Op: 0b11011010110000010011011111100000,
			Match: []arm.EncOp{mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0)}},
	},
	"b": {
		// B.cond
		{Op: 0b01010100000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatCond), mat(arm.MatOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdCond, 0), cmd(arm.CmdOffset, arm.RelBCond)}},
		// B
		{Op: 0b00010100000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdOffset, arm.RelB)}},
	},
	"bcax": {
		{Op: 0b11001110001000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.BYTE), 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdR10)}},
	},
	"bfc": {
		{Op: 0b00110011000000000000001111100000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatImm), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUnegmod, 16, 5), cmd(arm.CmdChkUsum, 5), cmd(arm.CmdUrange, 10, 1, 32)}},
		{Op: 0b10110011010000000000001111100000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatImm), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUnegmod, 16, 6), cmd(arm.CmdChkUsum, 6), cmd(arm.CmdUrange, 10, 1, 64)}},
	},
	"bfi": {
		{Op: 0b00110011000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatImm), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUnegmod, 16, 5), cmd(arm.CmdChkUsum, 5), cmd(arm.CmdUrange, 10, 1, 32)}},
		{Op: 0b10110011010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatImm), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUnegmod, 16, 6), cmd(arm.CmdChkUsum, 6), cmd(arm.CmdUrange, 10, 1, 64)}},
	},
	"bfm": {
		{Op: 0b00110011000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatImm), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 5), cmd(arm.CmdUbits, 10, 5)}},
		{Op: 0b10110011010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatImm), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 6), cmd(arm.CmdChkUsum, 6), cmd(arm.CmdUbits, 10, 6)}},
	},
	"bfxil": {
		{Op: 0b00110011000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatImm), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 5), cmd(arm.CmdChkUsum, 5), cmd(arm.CmdUsumdec, 10, 5)}},
		{Op: 0b10110011010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatImm), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 6), cmd(arm.CmdChkUsum, 6), cmd(arm.CmdUsumdec, 10, 6)}},
	},
	"bic": {
		// BIC (vector, mkmat(Immediate)
		{Op: 0b00101111000000001001010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatImm), mat(arm.MatEnd), mat(arm.MatLitMod, arm.SymLSL)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdChkUbits, 8), cmd(arm.CmdUslice, 5, 5, 0), cmd(arm.CmdUslice, 16, 3, 5), cmd(arm.CmdAdv), alt2(13, 0, 8), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101111000000000001010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatImm), mat(arm.MatEnd), mat(arm.MatLitMod, arm.SymLSL)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdChkUbits, 8), cmd(arm.CmdUslice, 5, 5, 0), cmd(arm.CmdUslice, 16, 3, 5), cmd(arm.CmdAdv), alt4(13, 0, 8, 16, 24), cmd(arm.CmdRwidth30)}},
		// BIC (vector, register)
		{Op: 0b00001110011000000001110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		// BIC (shifted register)
		{Op: 0b00001010001000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW), mat(arm.MatEnd), mat(arm.MatMod, arm.SymRotates)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRotates), cmd(arm.CmdUbits, 10, 5)}},
		{Op: 0b10001010001000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatX), mat(arm.MatEnd), mat(arm.MatMod, arm.SymRotates)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRotates), cmd(arm.CmdUbits, 10, 6)}},
	},
	"bics": {
		{Op: 0b01101010001000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW), mat(arm.MatEnd), mat(arm.MatMod, arm.SymRotates)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRotates), cmd(arm.CmdUbits, 10, 5)}},
		{Op: 0b11101010001000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatX), mat(arm.MatEnd), mat(arm.MatMod, arm.SymRotates)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRotates), cmd(arm.CmdUbits, 10, 6)}},
	},
	"bif": {
		{Op: 0b00101110111000000001110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"bit": {
		{Op: 0b00101110101000000001110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"bl": {
		{Op: 0b10010100000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdOffset, arm.RelB)}},
	},
	"blr": {
		{Op: 0b11010110001111110000000000000000,
			Match: []arm.EncOp{mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5)}},
	},
	"blraa": {
		{Op: 0b11010111001111110000100000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatXSP)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5), cmd(arm.CmdR0)}},
	},
	"blraaz": {
		{Op: 0b11010110001111110000100000011111,
			Match: []arm.EncOp{mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5)}},
	},
	"blrab": {
		{Op: 0b11010111001111110000110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatXSP)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5), cmd(arm.CmdR0)}},
	},
	"blrabz": {
		{Op: 0b11010110001111110000110000011111,
			Match: []arm.EncOp{mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5)}},
	},
	"br": {
		{Op: 0b11010110000111110000000000000000,
			Match: []arm.EncOp{mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5)}},
	},
	"braa": {
		{Op: 0b11010111000111110000100000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatXSP)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5), cmd(arm.CmdR0)}},
	},
	"braaz": {
		{Op: 0b11010110000111110000100000011111,
			Match: []arm.EncOp{mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5)}},
	},
	"brab": {
		{Op: 0b11010111000111110000110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatXSP)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5), cmd(arm.CmdR0)}},
	},
	"brabz": {
		{Op: 0b11010110000111110000110000011111,
			Match: []arm.EncOp{mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5)}},
	},
	"brk": {
		{Op: 0b11010100001000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdUbits, 5, 16)}},
	},
	"bsl": {
		{Op: 0b00101110011000000001110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"cas": {
		{Op: 0b10001000101000000111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11001000101000000111110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"casa": {
		{Op: 0b10001000111000000111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11001000111000000111110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"casab": {
		{Op: 0b00001000111000000111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"casah": {
		{Op: 0b01001000111000000111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"casal": {
		{Op: 0b10001000111000001111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11001000111000001111110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"casalb": {
		{Op: 0b00001000111000001111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"casalh": {
		{Op: 0b01001000111000001111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"casb": {
		{Op: 0b00001000101000000111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"cash": {
		{Op: 0b01001000101000000111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"casl": {
		{Op: 0b10001000101000001111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11001000101000001111110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"caslb": {
		{Op: 0b00001000101000001111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"caslh": {
		{Op: 0b01001000101000001111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"casp": {
		{Op: 0b00001000001000000111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdREven, 16), cmd(arm.CmdRNext), cmd(arm.CmdREven, 0), cmd(arm.CmdRNext), cmd(arm.CmdR5)}},
		{Op: 0b01001000001000000111110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdREven, 16), cmd(arm.CmdRNext), cmd(arm.CmdREven, 0), cmd(arm.CmdRNext), cmd(arm.CmdR5)}},
	},
	"caspa": {
		{Op: 0b00001000011000000111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdREven, 16), cmd(arm.CmdRNext), cmd(arm.CmdREven, 0), cmd(arm.CmdRNext), cmd(arm.CmdR5)}},
		{Op: 0b01001000011000000111110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdREven, 16), cmd(arm.CmdRNext), cmd(arm.CmdREven, 0), cmd(arm.CmdRNext), cmd(arm.CmdR5)}},
	},
	"caspal": {
		{Op: 0b00001000011000001111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdREven, 16), cmd(arm.CmdRNext), cmd(arm.CmdREven, 0), cmd(arm.CmdRNext), cmd(arm.CmdR5)}},
		{Op: 0b01001000011000001111110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdREven, 16), cmd(arm.CmdRNext), cmd(arm.CmdREven, 0), cmd(arm.CmdRNext), cmd(arm.CmdR5)}},
	},
	"caspl": {
		{Op: 0b00001000001000001111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdREven, 16), cmd(arm.CmdRNext), cmd(arm.CmdREven, 0), cmd(arm.CmdRNext), cmd(arm.CmdR5)}},
		{Op: 0b01001000001000001111110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdREven, 16), cmd(arm.CmdRNext), cmd(arm.CmdREven, 0), cmd(arm.CmdRNext), cmd(arm.CmdR5)}},
	},
	"cbnz": {
		{Op: 0b00110101000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdOffset, arm.RelBCond)}},
		{Op: 0b10110101000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdOffset, arm.RelBCond)}},
	},
	"cbz": {
		{Op: 0b00110100000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdOffset, arm.RelBCond)}},
		{Op: 0b10110100000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdOffset, arm.RelBCond)}},
	},
	"ccmn": {
		// CCMN (immediate)
		{Op: 0b00111010010000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatImm), mat(arm.MatImm), mat(arm.MatCond)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 5), cmd(arm.CmdUbits, 0, 4), cmd(arm.CmdCond, 12)}},
		{Op: 0b10111010010000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatImm), mat(arm.MatImm), mat(arm.MatCond)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 5), cmd(arm.CmdUbits, 0, 4), cmd(arm.CmdCond, 12)}},
		// CCMN (register)
		{Op: 0b00111010010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatImm), mat(arm.MatCond)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUbits, 0, 4), cmd(arm.CmdCond, 12)}},
		{Op: 0b10111010010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatImm), mat(arm.MatCond)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUbits, 0, 4), cmd(arm.CmdCond, 12)}},
	},
	"ccmp": {
		// CCMP (immediate)
		{Op: 0b01111010010000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatImm), mat(arm.MatImm), mat(arm.MatCond)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 5), cmd(arm.CmdUbits, 0, 4), cmd(arm.CmdCond, 12)}},
		{Op: 0b11111010010000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatImm), mat(arm.MatImm), mat(arm.MatCond)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 5), cmd(arm.CmdUbits, 0, 4), cmd(arm.CmdCond, 12)}},
		// CCMP (register)
		{Op: 0b01111010010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatImm), mat(arm.MatCond)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUbits, 0, 4), cmd(arm.CmdCond, 12)}},
		{Op: 0b11111010010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatImm), mat(arm.MatCond)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUbits, 0, 4), cmd(arm.CmdCond, 12)}},
	},
	"cfinv": {
		{Op: 0b11010101000000000100000000011111,
			Match: []arm.EncOp{},
			Cmds:  []arm.EncOp{}},
	},
	"cfp": {
		{Op: 0b11010101000010110111001110000000,
			Match: []arm.EncOp{mat(arm.MatLitSymbol, uint8(arm.RCTX)), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0)}},
	},
	"cinc": {
		{Op: 0b00011010100000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatCond)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdBack), cmd(arm.CmdR16), cmd(arm.CmdCondInv, 12)}},
		{Op: 0b10011010100000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatCond)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdBack), cmd(arm.CmdR16), cmd(arm.CmdCondInv, 12)}},
	},
	"cinv": {
		{Op: 0b01011010100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatCond)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdBack), cmd(arm.CmdR16), cmd(arm.CmdCondInv, 12)}},
		{Op: 0b11011010100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatCond)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdBack), cmd(arm.CmdR16), cmd(arm.CmdCondInv, 12)}},
	},
	"clrex": {
		{Op: 0b11010101000000110011000001011111,
			Match: []arm.EncOp{mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdUbits, 8, 4)}},
		{Op: 0b11010101000000110011111101011111,
			Match: []arm.EncOp{},
			Cmds:  []arm.EncOp{}},
	},
	"cls": {
		// CLS (vector)
		{Op: 0b00001110001000000100100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000000100100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000000100100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		// CLS
		{Op: 0b01011010110000000001010000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11011010110000000001010000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"clz": {
		// CLZ (vector)
		{Op: 0b00101110001000000100100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011000000100100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101000000100100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		// CLZ
		{Op: 0b01011010110000000001000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11011010110000000001000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"cmeq": {
		// CMEQ (register)
		{Op: 0b01111110111000001000110000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00101110001000001000110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011000001000110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101000001000110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110111000001000110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		// CMEQ (zero)
		{Op: 0b01011110111000001001100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatLitInt, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001110001000001001100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatLitInt, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000001001100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatLitInt, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000001001100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatLitInt, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110111000001001100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatLitInt, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
	},
	"cmge": {
		// CMGE (register)
		{Op: 0b01011110111000000011110000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00001110001000000011110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000000011110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000000011110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110111000000011110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		// CMGE (zero)
		{Op: 0b01111110111000001000100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatLitInt, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00101110001000001000100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatLitInt, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011000001000100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatLitInt, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101000001000100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatLitInt, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110111000001000100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatLitInt, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
	},
	"cmgt": {
		// CMGT (register)
		{Op: 0b01011110111000000011010000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00001110001000000011010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000000011010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000000011010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110111000000011010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		// CMGT (zero)
		{Op: 0b01011110111000001000100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatLitInt, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001110001000001000100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatLitInt, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000001000100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatLitInt, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000001000100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatLitInt, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110111000001000100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatLitInt, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
	},
	"cmhi": {
		{Op: 0b01111110111000000011010000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00101110001000000011010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011000000011010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101000000011010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110111000000011010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"cmhs": {
		{Op: 0b01111110111000000011110000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00101110001000000011110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011000000011110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101000000011110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110111000000011110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"cmle": {
		{Op: 0b01111110111000001001100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatLitInt, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00101110001000001001100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatLitInt, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011000001001100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatLitInt, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101000001001100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatLitInt, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110111000001001100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatLitInt, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
	},
	"cmlt": {
		{Op: 0b01011110111000001010100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatLitInt, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001110001000001010100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatLitInt, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000001010100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatLitInt, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000001010100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatLitInt, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110111000001010100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatLitInt, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
	},
	"cmn": {
		// CMN (shifted register)
		{Op: 0b00101011000000000000000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatEnd), mat(arm.MatMod, arm.SymShifts)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRotates), cmd(arm.CmdUbits, 10, 5)}},
		{Op: 0b10101011000000000000000000011111,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatEnd), mat(arm.MatMod, arm.SymShifts)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRotates), cmd(arm.CmdUbits, 10, 6)}},
		// CMN (extended register)
		{Op: 0b00101011001000000000000000011111,
			Match: []arm.EncOp{mat(arm.MatWSP), mat(arm.MatW), mat(arm.MatEnd), mat(arm.MatMod, arm.SymExtends)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdExtendsW), cmd(arm.CmdUrange, 10, 0, 4)}},
		{Op: 0b10101011001000000000000000011111,
			Match: []arm.EncOp{mat(arm.MatXSP), mat(arm.MatW), mat(arm.MatMod, arm.SymExtendsW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdExtendsX), cmd(arm.CmdUrange, 10, 0, 4)}},
		{Op: 0b10101011001000000000000000011111,
			Match: []arm.EncOp{mat(arm.MatXSP), mat(arm.MatX), mat(arm.MatEnd), mat(arm.MatMod, arm.SymExtendsX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdExtendsX), cmd(arm.CmdUrange, 10, 0, 4)}},
		// CMN (immediate)
		{Op: 0b00110001000000000000000000011111,
			Match: []arm.EncOp{mat(arm.MatWSP), mat(arm.MatImm), mat(arm.MatEnd), mat(arm.MatLitMod, arm.SymLSL)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5), cmd(arm.CmdUbits, 10, 12), alt2(22, 0, 12)}},
		{Op: 0b10110001000000000000000000011111,
			Match: []arm.EncOp{mat(arm.MatXSP), mat(arm.MatImm), mat(arm.MatEnd), mat(arm.MatLitMod, arm.SymLSL)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5), cmd(arm.CmdUbits, 10, 12), alt2(22, 0, 12)}},
	},
	"cmp": {
		// CMP (shifted register)
		{Op: 0b01101011000000000000000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatEnd), mat(arm.MatMod, arm.SymShifts)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRotates), cmd(arm.CmdUbits, 10, 5)}},
		{Op: 0b11101011000000000000000000011111,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatEnd), mat(arm.MatMod, arm.SymShifts)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRotates), cmd(arm.CmdUbits, 10, 6)}},
		// CMP (extended register)
		{Op: 0b01101011001000000000000000011111,
			Match: []arm.EncOp{mat(arm.MatWSP), mat(arm.MatW), mat(arm.MatEnd), mat(arm.MatMod, arm.SymExtends)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdExtendsW), cmd(arm.CmdUrange, 10, 0, 4)}},
		{Op: 0b11101011001000000000000000011111,
			Match: []arm.EncOp{mat(arm.MatXSP), mat(arm.MatW), mat(arm.MatMod, arm.SymExtendsW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdExtendsX), cmd(arm.CmdUrange, 10, 0, 4)}},
		{Op: 0b11101011001000000000000000011111,
			Match: []arm.EncOp{mat(arm.MatXSP), mat(arm.MatX), mat(arm.MatEnd), mat(arm.MatMod, arm.SymExtendsX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdExtendsX), cmd(arm.CmdUrange, 10, 0, 4)}},
		// CMP (immediate)
		{Op: 0b01110001000000000000000000011111,
			Match: []arm.EncOp{mat(arm.MatWSP), mat(arm.MatImm), mat(arm.MatEnd), mat(arm.MatLitMod, arm.SymLSL)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5), cmd(arm.CmdUbits, 10, 12), alt2(22, 0, 12)}},
		{Op: 0b11110001000000000000000000011111,
			Match: []arm.EncOp{mat(arm.MatXSP), mat(arm.MatImm), mat(arm.MatEnd), mat(arm.MatLitMod, arm.SymLSL)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5), cmd(arm.CmdUbits, 10, 12), alt2(22, 0, 12)}},
	},
	"cmtst": {
		{Op: 0b01011110111000001000110000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00001110001000001000110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000001000110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000001000110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110111000001000110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"cneg": {
		{Op: 0b01011010100000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatCond)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdBack), cmd(arm.CmdR16), cmd(arm.CmdCondInv, 12)}},
		{Op: 0b11011010100000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatCond)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdBack), cmd(arm.CmdR16), cmd(arm.CmdCondInv, 12)}},
	},
	"cnt": {
		{Op: 0b00001110001000000101100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
	},
	"cpp": {
		{Op: 0b11010101000010110111001111100000,
			Match: []arm.EncOp{mat(arm.MatLitSymbol, uint8(arm.RCTX)), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0)}},
	},
	"crc32b": {
		{Op: 0b00011010110000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"crc32cb": {
		{Op: 0b00011010110000000101000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"crc32ch": {
		{Op: 0b00011010110000000101010000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"crc32cw": {
		{Op: 0b00011010110000000101100000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"crc32cx": {
		{Op: 0b10011010110000000101110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"crc32h": {
		{Op: 0b00011010110000000100010000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"crc32w": {
		{Op: 0b00011010110000000100100000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"crc32x": {
		{Op: 0b10011010110000000100110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"csdb": {
		{Op: 0b11010101000000110010001010011111,
			Match: []arm.EncOp{},
			Cmds:  []arm.EncOp{}},
	},
	"csel": {
		{Op: 0b00011010100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW), mat(arm.MatCond)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdCond, 12)}},
		{Op: 0b10011010100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatX), mat(arm.MatCond)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdCond, 12)}},
	},
	"cset": {
		{Op: 0b00011010100111110000011111100000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatCond)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdCondInv, 12)}},
		{Op: 0b10011010100111110000011111100000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatCond)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdCondInv, 12)}},
	},
	"csetm": {
		{Op: 0b01011010100111110000001111100000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatCond)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdCondInv, 12)}},
		{Op: 0b11011010100111110000001111100000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatCond)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdCondInv, 12)}},
	},
	"csinc": {
		{Op: 0b00011010100000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW), mat(arm.MatCond)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdCond, 12)}},
		{Op: 0b10011010100000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatX), mat(arm.MatCond)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdCond, 12)}},
	},
	"csinv": {
		{Op: 0b01011010100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW), mat(arm.MatCond)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdCond, 12)}},
		{Op: 0b11011010100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatX), mat(arm.MatCond)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdCond, 12)}},
	},
	"csneg": {
		{Op: 0b01011010100000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW), mat(arm.MatCond)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdCond, 12)}},
		{Op: 0b11011010100000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatX), mat(arm.MatCond)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdCond, 12)}},
	},
	"dc": {
		{Op: 0b11010101000010000111000000000000,
			Match: []arm.EncOp{mat(arm.MatSymbol), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdLitList, 5, arm.SymDCOPS), cmd(arm.CmdR0)}},
	},
	"dcps1": {
		{Op: 0b11010100101000000000000000000001,
			Match: []arm.EncOp{mat(arm.MatEnd), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdUbits, 5, 16)}},
	},
	"dcps2": {
		{Op: 0b11010100101000000000000000000010,
			Match: []arm.EncOp{mat(arm.MatEnd), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdUbits, 5, 16)}},
	},
	"dcps3": {
		{Op: 0b11010100101000000000000000000011,
			Match: []arm.EncOp{mat(arm.MatEnd), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdUbits, 5, 16)}},
	},
	"dmb": {
		{Op: 0b11010101000000110011000010111111,
			Match: []arm.EncOp{mat(arm.MatSymbol)},
			Cmds:  []arm.EncOp{cmd(arm.CmdLitList, 8, arm.SymBARRIEROPS)}},
		{Op: 0b11010101000000110011000010111111,
			Match: []arm.EncOp{mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdUbits, 8, 4)}},
	},
	"drps": {
		{Op: 0b11010110101111110000001111100000,
			Match: []arm.EncOp{},
			Cmds:  []arm.EncOp{}},
	},
	"dsb": {
		{Op: 0b11010101000000110011000010011111,
			Match: []arm.EncOp{mat(arm.MatSymbol)},
			Cmds:  []arm.EncOp{cmd(arm.CmdLitList, 8, arm.SymBARRIEROPS)}},
		{Op: 0b11010101000000110011000010011111,
			Match: []arm.EncOp{mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdUbits, 8, 4)}},
	},
	"dup": {
		// DUP (element)
		{Op: 0b01011110000000010000010000000000,
			Match: []arm.EncOp{mat(arm.MatB), mat(arm.MatVElement, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 17, 4)}},
		{Op: 0b01011110000000100000010000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 18, 3)}},
		{Op: 0b01011110000001000000010000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 19, 2)}},
		{Op: 0b01011110000010000000010000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatVElement, uint8(arm.QWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 20, 1)}},
		{Op: 0b00001110000000010000010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatVElement, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 17, 4), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110000000100000010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 18, 3), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110000001000000010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 19, 2), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110000010000000010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVElement, uint8(arm.QWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 20, 1), cmd(arm.CmdRwidth30)}},
		// DUP (general)
		{Op: 0b00001110000000010000110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdRwidth30), cmd(arm.CmdR5)}},
		{Op: 0b00001110000000100000110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdRwidth30), cmd(arm.CmdR5)}},
		{Op: 0b00001110000001000000110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdRwidth30), cmd(arm.CmdR5)}},
		{Op: 0b00001110000010000000110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdRwidth30), cmd(arm.CmdR5)}},
	},
	"dvp": {
		{Op: 0b11010101000010110111001110100000,
			Match: []arm.EncOp{mat(arm.MatLitSymbol, uint8(arm.RCTX)), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0)}},
	},
	"eon": {
		{Op: 0b01001010001000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW), mat(arm.MatEnd), mat(arm.MatMod, arm.SymRotates)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRotates), cmd(arm.CmdUbits, 10, 5)}},
		{Op: 0b11001010001000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatX), mat(arm.MatEnd), mat(arm.MatMod, arm.SymRotates)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRotates), cmd(arm.CmdUbits, 10, 6)}},
	},
	"eor": {
		// EOR (vector)
		{Op: 0b00101110001000000001110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		// EOR (immediate)
		{Op: 0b01010010000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatWSP), mat(arm.MatW), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSpecial, 10, arm.SpecialImmLogical32)}},
		{Op: 0b11010010000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatXSP), mat(arm.MatX), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSpecial, 10, arm.SpecialImmLogical64)}},
		// EOR (shifted register)
		{Op: 0b01001010000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW), mat(arm.MatEnd), mat(arm.MatMod, arm.SymRotates)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRotates), cmd(arm.CmdUbits, 10, 5)}},
		{Op: 0b11001010000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatX), mat(arm.MatEnd), mat(arm.MatMod, arm.SymRotates)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRotates), cmd(arm.CmdUbits, 10, 6)}},
	},
	"eor3": {
		{Op: 0b11001110000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.BYTE), 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdR10)}},
	},
	"eret": {
		{Op: 0b11010110100111110000001111100000,
			Match: []arm.EncOp{},
			Cmds:  []arm.EncOp{}},
	},
	"eretaa": {
		{Op: 0b11010110100111110000101111111111,
			Match: []arm.EncOp{},
			Cmds:  []arm.EncOp{}},
	},
	"eretab": {
		{Op: 0b11010110100111110000111111111111,
			Match: []arm.EncOp{},
			Cmds:  []arm.EncOp{}},
	},
	"esb": {
		{Op: 0b11010101000000110010001000011111,
			Match: []arm.EncOp{},
			Cmds:  []arm.EncOp{}},
	},
	"ext": {
		{Op: 0b00101110000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.BYTE), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 8), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUbits, 11, 3)}},
		{Op: 0b01101110000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUbits, 11, 4)}},
	},
	"extr": {
		{Op: 0b00010011100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUbits, 10, 5)}},
		{Op: 0b10010011110000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatX), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUbits, 10, 6)}},
	},
	"fabd": {
		{Op: 0b01111110110000000001010000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01111110101000001101010000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01111110111000001101010000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00101110110000000001010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101000001101010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110111000001101010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"fabs": {
		// FABS (vector)
		{Op: 0b00001110111110001111100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000001111100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110111000001111100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		// FABS (scalar)
		{Op: 0b00011110111000001100000000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110001000001100000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110011000001100000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"facge": {
		{Op: 0b01111110010000000010110000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01111110001000001110110000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01111110011000001110110000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00101110010000000010110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110001000001110110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011000001110110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"facgt": {
		{Op: 0b01111110110000000010110000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01111110101000001110110000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01111110111000001110110000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00101110110000000010110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101000001110110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110111000001110110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"fadd": {
		// FADD (vector)
		{Op: 0b00001110010000000001010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110001000001101010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000001101010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		// FADD (scalar)
		{Op: 0b00011110111000000010100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00011110001000000010100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00011110011000000010100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"faddp": {
		// FADDP (scalar)
		{Op: 0b01011110001100001101100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatVStatic, uint8(arm.WORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01111110001100001101100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatVStatic, uint8(arm.DWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01111110011100001101100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		// FADDP (vector)
		{Op: 0b00101110010000000001010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110001000001101010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011000001101010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"fcadd": {
		{Op: 0b00101110010000001110010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), alt2(12, 90, 270), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110100000001110010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), alt2(12, 90, 270), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110110000001110010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), alt2(12, 90, 270), cmd(arm.CmdRwidth30)}},
	},
	"fccmp": {
		{Op: 0b00011110111000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatImm), mat(arm.MatCond)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUbits, 0, 4), cmd(arm.CmdCond, 12)}},
		{Op: 0b00011110001000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatImm), mat(arm.MatCond)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUbits, 0, 4), cmd(arm.CmdCond, 12)}},
		{Op: 0b00011110011000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatImm), mat(arm.MatCond)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUbits, 0, 4), cmd(arm.CmdCond, 12)}},
	},
	"fccmpe": {
		{Op: 0b00011110111000000000010000010000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatImm), mat(arm.MatCond)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUbits, 0, 4), cmd(arm.CmdCond, 12)}},
		{Op: 0b00011110001000000000010000010000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatImm), mat(arm.MatCond)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUbits, 0, 4), cmd(arm.CmdCond, 12)}},
		{Op: 0b00011110011000000000010000010000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatImm), mat(arm.MatCond)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUbits, 0, 4), cmd(arm.CmdCond, 12)}},
	},
	"fcmeq": {
		// FCMEQ (register)
		{Op: 0b01011110010000000010010000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01011110001000001110010000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01011110011000001110010000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00001110010000000010010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110001000001110010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000001110010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		// FCMEQ (zero)
		{Op: 0b01011110111110001101100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatLitFloat, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01011110101000001101100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatLitFloat, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01011110111000001101100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatLitFloat, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001110111110001101100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatLitFloat, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000001101100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatLitFloat, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110111000001101100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatLitFloat, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
	},
	"fcmge": {
		// FCMGE (register)
		{Op: 0b01111110010000000010010000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01111110001000001110010000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01111110011000001110010000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00101110010000000010010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110001000001110010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011000001110010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		// FCMGE (zero)
		{Op: 0b01111110111110001100100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatLitFloat, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01111110101000001100100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatLitFloat, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01111110111000001100100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatLitFloat, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00101110111110001100100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatLitFloat, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101000001100100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatLitFloat, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110111000001100100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatLitFloat, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
	},
	"fcmgt": {
		// FCMGT (register)
		{Op: 0b01111110110000000010010000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01111110101000001110010000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01111110111000001110010000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00101110110000000010010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101000001110010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110111000001110010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		// FCMGT (zero)
		{Op: 0b01011110111110001100100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatLitFloat, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01011110101000001100100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatLitFloat, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01011110111000001100100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatLitFloat, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001110111110001100100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatLitFloat, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000001100100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatLitFloat, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110111000001100100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatLitFloat, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
	},
	"fcmla": {
		// FCMLA (by element)
		{Op: 0b00101111010000000001000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVElement, uint8(arm.WORD)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields21), alt4(13, 0, 90, 180, 270)}},
		{Op: 0b01101111010000000001000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVElement, uint8(arm.WORD)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2), alt4(13, 0, 90, 180, 270)}},
		{Op: 0b00101111100000000001000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVElement, uint8(arm.DWORD)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 1), alt4(13, 0, 90, 180, 270), cmd(arm.CmdRwidth30)}},
		// FCMLA
		{Op: 0b00101110010000001100010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), alt4(11, 0, 90, 180, 270), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110100000001100010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), alt4(11, 0, 90, 180, 270), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110110000001100010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), alt4(11, 0, 90, 180, 270), cmd(arm.CmdRwidth30)}},
	},
	"fcmle": {
		{Op: 0b01111110111110001101100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatLitFloat, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01111110101000001101100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatLitFloat, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01111110111000001101100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatLitFloat, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00101110111110001101100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatLitFloat, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101000001101100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatLitFloat, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110111000001101100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatLitFloat, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
	},
	"fcmlt": {
		{Op: 0b01011110111110001110100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatLitFloat, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01011110101000001110100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatLitFloat, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01011110111000001110100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatLitFloat, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001110111110001110100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatLitFloat, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000001110100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatLitFloat, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110111000001110100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatLitFloat, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
	},
	"fcmp": {
		{Op: 0b00011110111000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00011110111000000010000000001000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatLitFloat, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5)}},
		{Op: 0b00011110001000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00011110001000000010000000001000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatLitFloat, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5)}},
		{Op: 0b00011110011000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00011110011000000010000000001000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatLitFloat, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5)}},
	},
	"fcmpe": {
		{Op: 0b00011110111000000010000000010000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00011110111000000010000000011000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatLitFloat, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5)}},
		{Op: 0b00011110001000000010000000010000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00011110001000000010000000011000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatLitFloat, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5)}},
		{Op: 0b00011110011000000010000000010000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00011110011000000010000000011000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatLitFloat, 0)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5)}},
	},
	"fcsel": {
		{Op: 0b00011110111000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatH), mat(arm.MatCond)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdCond, 12)}},
		{Op: 0b00011110001000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatS), mat(arm.MatCond)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdCond, 12)}},
		{Op: 0b00011110011000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatD), mat(arm.MatCond)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdCond, 12)}},
	},
	"fcvt": {
		{Op: 0b00011110111000100100000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110111000101100000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110001000111100000000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110001000101100000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110011000111100000000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110011000100100000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"fcvtas": {
		// FCVTAS (vector)
		{Op: 0b01011110011110011100100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01011110001000011100100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01011110011000011100100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001110011110011100100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110001000011100100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000011100100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		// FCVTAS (scalar)
		{Op: 0b00011110111001000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10011110111001000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110001001000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10011110001001000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110011001000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10011110011001000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"fcvtau": {
		// FCVTAU (vector)
		{Op: 0b01111110011110011100100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01111110001000011100100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01111110011000011100100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00101110011110011100100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110001000011100100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011000011100100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		// FCVTAU (scalar)
		{Op: 0b00011110111001010000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10011110111001010000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110001001010000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10011110001001010000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110011001010000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10011110011001010000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"fcvtl": {
		{Op: 0b00001110001000010111100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001110011000010111100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"fcvtl2": {
		{Op: 0b01001110001000010111100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001110011000010111100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"fcvtms": {
		// FCVTMS (vector)
		{Op: 0b01011110011110011011100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01011110001000011011100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01011110011000011011100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001110011110011011100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110001000011011100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000011011100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		// FCVTMS (scalar)
		{Op: 0b00011110111100000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10011110111100000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110001100000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10011110001100000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110011100000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10011110011100000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"fcvtmu": {
		// FCVTMU (vector)
		{Op: 0b01111110011110011011100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01111110001000011011100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01111110011000011011100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00101110011110011011100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110001000011011100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011000011011100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		// FCVTMU (scalar)
		{Op: 0b00011110111100010000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10011110111100010000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110001100010000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10011110001100010000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110011100010000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10011110011100010000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"fcvtn": {
		{Op: 0b00001110011000010110100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"fcvtn2": {
		{Op: 0b01001110011000010110100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"fcvtns": {
		// FCVTNS (vector)
		{Op: 0b01011110011110011010100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01011110001000011010100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01011110011000011010100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001110011110011010100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110001000011010100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000011010100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		// FCVTNS (scalar)
		{Op: 0b00011110111000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10011110111000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110001000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10011110001000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110011000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10011110011000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"fcvtnu": {
		// FCVTNU (vector)
		{Op: 0b01111110011110011010100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01111110001000011010100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01111110011000011010100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00101110011110011010100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110001000011010100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011000011010100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		// FCVTNU (scalar)
		{Op: 0b00011110111000010000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10011110111000010000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110001000010000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10011110001000010000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110011000010000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10011110011000010000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"fcvtps": {
		// FCVTPS (vector)
		{Op: 0b01011110111110011010100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01011110101000011010100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01011110111000011010100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001110111110011010100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000011010100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110111000011010100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		// FCVTPS (scalar)
		{Op: 0b00011110111010000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10011110111010000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110001010000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10011110001010000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110011010000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10011110011010000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"fcvtpu": {
		// FCVTPU (vector)
		{Op: 0b01111110111110011010100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01111110101000011010100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01111110111000011010100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00101110111110011010100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101000011010100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110111000011010100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		// FCVTPU (scalar)
		{Op: 0b00011110111010010000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10011110111010010000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110001010010000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10011110001010010000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110011010010000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10011110011010010000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"fcvtxn": {
		{Op: 0b01111110011000010110100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00101110011000010110100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"fcvtxn2": {
		{Op: 0b01101110011000010110100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"fcvtzs": {
		// FCVTZS (vector, fixed-point)
		{Op: 0b01011111000000001111110000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 16), cmd(arm.CmdUsub, 16, 5, 32)}},
		{Op: 0b01011111000000001111110000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 32), cmd(arm.CmdUsub, 16, 6, 64)}},
		{Op: 0b01011111000000001111110000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 64), cmd(arm.CmdUsub, 16, 7, 128)}},
		{Op: 0b00001111000100001111110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 4, 16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001111001000001111110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 5, 32), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001111010000001111110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 6, 64), cmd(arm.CmdRwidth30)}},
		// FCVTZS (vector, integer)
		{Op: 0b01011110111110011011100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01011110101000011011100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01011110111000011011100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001110111110011011100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000011011100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110111000011011100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		// FCVTZS (scalar, fixed-point)
		{Op: 0b00011110110110000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatH), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 32), cmd(arm.CmdUsub, 10, 6, 64)}},
		{Op: 0b10011110110110000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatH), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 10, 6, 64)}},
		{Op: 0b00011110000110000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatS), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 32), cmd(arm.CmdUsub, 10, 6, 64)}},
		{Op: 0b10011110000110000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatS), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 10, 6, 64)}},
		{Op: 0b00011110010110000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatD), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 32), cmd(arm.CmdUsub, 10, 6, 64)}},
		{Op: 0b10011110010110000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatD), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 10, 6, 64)}},
		// FCVTZS (scalar, integer)
		{Op: 0b00011110111110000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10011110111110000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110001110000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10011110001110000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110011110000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10011110011110000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"fcvtzu": {
		// FCVTZU (vector, fixed-point)
		{Op: 0b01111111000000001111110000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 16), cmd(arm.CmdUsub, 16, 5, 32)}},
		{Op: 0b01111111000000001111110000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 32), cmd(arm.CmdUsub, 16, 6, 64)}},
		{Op: 0b01111111000000001111110000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 64), cmd(arm.CmdUsub, 16, 7, 128)}},
		{Op: 0b00101111000100001111110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 4, 16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101111001000001111110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 5, 32), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101111010000001111110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 6, 64), cmd(arm.CmdRwidth30)}},
		// FCVTZU (vector, integer)
		{Op: 0b01111110111110011011100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01111110101000011011100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01111110111000011011100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00101110111110011011100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101000011011100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110111000011011100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		// FCVTZU (scalar, fixed-point)
		{Op: 0b00011110110110010000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatH), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 32), cmd(arm.CmdUsub, 10, 6, 64)}},
		{Op: 0b10011110110110010000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatH), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 10, 6, 64)}},
		{Op: 0b00011110000110010000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatS), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 32), cmd(arm.CmdUsub, 10, 6, 64)}},
		{Op: 0b10011110000110010000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatS), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 10, 6, 64)}},
		{Op: 0b00011110010110010000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatD), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 32), cmd(arm.CmdUsub, 10, 6, 64)}},
		{Op: 0b10011110010110010000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatD), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 10, 6, 64)}},
		// FCVTZU (scalar, integer)
		{Op: 0b00011110111110010000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10011110111110010000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110001110010000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10011110001110010000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110011110010000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10011110011110010000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"fdiv": {
		// FDIV (vector)
		{Op: 0b00101110010000000011110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110001000001111110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011000001111110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		// FDIV (scalar)
		{Op: 0b00011110111000000001100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00011110001000000001100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00011110011000000001100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"fjcvtzs": {
		{Op: 0b00011110011111100000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"fmadd": {
		{Op: 0b00011111110000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdR10)}},
		{Op: 0b00011111000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdR10)}},
		{Op: 0b00011111010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdR10)}},
	},
	"fmax": {
		// FMAX (vector)
		{Op: 0b00001110010000000011010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110001000001111010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000001111010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		// FMAX (scalar)
		{Op: 0b00011110111000000100100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00011110001000000100100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00011110011000000100100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"fmaxnm": {
		// FMAXNM (vector)
		{Op: 0b00001110010000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110001000001100010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000001100010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		// FMAXNM (scalar)
		{Op: 0b00011110111000000110100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00011110001000000110100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00011110011000000110100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"fmaxnmp": {
		// FMAXNMP (scalar)
		{Op: 0b01011110001100001100100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatVStatic, uint8(arm.WORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01111110001100001100100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatVStatic, uint8(arm.DWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01111110011100001100100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		// FMAXNMP (vector)
		{Op: 0b00101110010000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110001000001100010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011000001100010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"fmaxnmv": {
		{Op: 0b00001110001100001100100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110001100001100100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
	},
	"fmaxp": {
		// FMAXP (scalar)
		{Op: 0b01011110001100001111100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatVStatic, uint8(arm.WORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01111110001100001111100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatVStatic, uint8(arm.DWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01111110011100001111100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		// FMAXP (vector)
		{Op: 0b00101110010000000011010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110001000001111010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011000001111010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"fmaxv": {
		{Op: 0b00001110001100001111100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110001100001111100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
	},
	"fmin": {
		// FMIN (vector)
		{Op: 0b00001110110000000011010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000001111010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110111000001111010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		// FMIN (scalar)
		{Op: 0b00011110111000000101100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00011110001000000101100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00011110011000000101100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"fminnm": {
		// FMINNM (vector)
		{Op: 0b00001110110000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000001100010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110111000001100010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		// FMINNM (scalar)
		{Op: 0b00011110111000000111100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00011110001000000111100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00011110011000000111100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"fminnmp": {
		// FMINNMP (scalar)
		{Op: 0b01011110101100001100100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatVStatic, uint8(arm.WORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01111110101100001100100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatVStatic, uint8(arm.DWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01111110111100001100100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		// FMINNMP (vector)
		{Op: 0b00101110110000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101000001100010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110111000001100010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"fminnmv": {
		{Op: 0b00001110101100001100100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101100001100100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
	},
	"fminp": {
		// FMINP (scalar)
		{Op: 0b01011110101100001111100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatVStatic, uint8(arm.WORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01111110101100001111100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatVStatic, uint8(arm.DWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01111110111100001111100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		// FMINP (vector)
		{Op: 0b00101110110000000011010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101000001111010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110111000001111010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"fminv": {
		{Op: 0b00001110101100001111100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101100001111100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
	},
	"fmla": {
		// FMLA (by element)
		{Op: 0b01011111000000000001000000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3)}},
		{Op: 0b01011111100000000001000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2)}},
		{Op: 0b01011111110000000001000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatVElement, uint8(arm.QWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 1)}},
		{Op: 0b00001111000000000001000000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001111100000000001000000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001111110000000001000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVElement, uint8(arm.QWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 1), cmd(arm.CmdRwidth30)}},
		// FMLA (vector)
		{Op: 0b00001110010000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110001000001100110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000001100110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"fmlal": {
		// FMLAL, FMLAL2 (by element)
		{Op: 0b00001111100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.WORD), 2), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3)}},
		{Op: 0b01001111100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3)}},
		// FMLAL, FMLAL2 (vector)
		{Op: 0b00001110001000001110110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.WORD), 2), mat(arm.MatVStatic, uint8(arm.WORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01001110001000001110110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"fmlal2": {
		// FMLAL, FMLAL2 (by element)
		{Op: 0b00101111100000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.WORD), 2), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3)}},
		{Op: 0b01101111100000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3)}},
		// FMLAL, FMLAL2 (vector)
		{Op: 0b00101110001000001100110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.WORD), 2), mat(arm.MatVStatic, uint8(arm.WORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01101110001000001100110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"fmls": {
		// FMLS (by element)
		{Op: 0b01011111000000000101000000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3)}},
		{Op: 0b01011111100000000101000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2)}},
		{Op: 0b01011111110000000101000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatVElement, uint8(arm.QWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 1)}},
		{Op: 0b00001111000000000101000000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001111100000000101000000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001111110000000101000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVElement, uint8(arm.QWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 1), cmd(arm.CmdRwidth30)}},
		// FMLS (vector)
		{Op: 0b00001110110000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000001100110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110111000001100110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"fmlsl": {
		// FMLSL, FMLSL2 (by element)
		{Op: 0b00001111100000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.WORD), 2), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3)}},
		{Op: 0b01001111100000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3)}},
		// FMLSL, FMLSL2 (vector)
		{Op: 0b00001110101000001110110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.WORD), 2), mat(arm.MatVStatic, uint8(arm.WORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01001110101000001110110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"fmlsl2": {
		// FMLSL, FMLSL2 (by element)
		{Op: 0b00101111100000001100000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.WORD), 2), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3)}},
		{Op: 0b01101111100000001100000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3)}},
		// FMLSL, FMLSL2 (vector)
		{Op: 0b00101110101000001100110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.WORD), 2), mat(arm.MatVStatic, uint8(arm.WORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01101110101000001100110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"fmov": {
		// FMOV (vector, mkmat(Immediate)
		{Op: 0b00001111000000001111110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatFloat)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdSpecial, 5, arm.SpecialImmFloatSplit), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001111000000001111010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatFloat)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdSpecial, 5, arm.SpecialImmFloatSplit), cmd(arm.CmdRwidth30)}},
		{Op: 0b01101111000000001111010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatFloat)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdSpecial, 5, arm.SpecialImmFloatSplit)}},
		// FMOV (register)
		{Op: 0b00011110111000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110001000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110011000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		// FMOV (general)
		{Op: 0b00011110111001100000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10011110111001100000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110111001110000000000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110001001110000000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110001001100000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10011110111001110000000000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10011110011001110000000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10011110101011110000000000000000,
			Match: []arm.EncOp{mat(arm.MatVElementStatic, uint8(arm.QWORD), 1), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10011110011001100000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10011110101011100000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatVElementStatic, uint8(arm.QWORD), 1)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		// FMOV (scalar, mkmat(Immediate)
		{Op: 0b00011110111000000001000000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatFloat)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdSpecial, 13, arm.SpecialImmFloat)}},
		{Op: 0b00011110001000000001000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatFloat)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdSpecial, 13, arm.SpecialImmFloat)}},
		{Op: 0b00011110011000000001000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatFloat)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdSpecial, 13, arm.SpecialImmFloat)}},
	},
	"fmsub": {
		{Op: 0b00011111110000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdR10)}},
		{Op: 0b00011111000000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdR10)}},
		{Op: 0b00011111010000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdR10)}},
	},
	"fmul": {
		// FMUL (by element)
		{Op: 0b01011111000000001001000000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3)}},
		{Op: 0b01011111100000001001000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2)}},
		{Op: 0b01011111110000001001000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatVElement, uint8(arm.QWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 1)}},
		{Op: 0b00001111000000001001000000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001111100000001001000000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001111110000001001000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVElement, uint8(arm.QWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 1), cmd(arm.CmdRwidth30)}},
		// FMUL (vector)
		{Op: 0b00101110010000000001110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110001000001101110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011000001101110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		// FMUL (scalar)
		{Op: 0b00011110111000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00011110001000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00011110011000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"fmulx": {
		// FMULX (by element)
		{Op: 0b01111111000000001001000000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3)}},
		{Op: 0b01111111100000001001000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2)}},
		{Op: 0b01111111110000001001000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatVElement, uint8(arm.QWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 1)}},
		{Op: 0b00101111000000001001000000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101111100000001001000000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101111110000001001000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVElement, uint8(arm.QWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 1), cmd(arm.CmdRwidth30)}},
		// FMULX
		{Op: 0b01011110010000000001110000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01011110001000001101110000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01011110011000001101110000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00001110010000000001110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110001000001101110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000001101110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"fneg": {
		// FNEG (vector)
		{Op: 0b00101110111110001111100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101000001111100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110111000001111100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		// FNEG (scalar)
		{Op: 0b00011110111000010100000000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110001000010100000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110011000010100000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"fnmadd": {
		{Op: 0b00011111111000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdR10)}},
		{Op: 0b00011111001000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdR10)}},
		{Op: 0b00011111011000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdR10)}},
	},
	"fnmsub": {
		{Op: 0b00011111111000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdR10)}},
		{Op: 0b00011111001000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdR10)}},
		{Op: 0b00011111011000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdR10)}},
	},
	"fnmul": {
		{Op: 0b00011110111000001000100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00011110001000001000100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00011110011000001000100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"frecpe": {
		{Op: 0b01011110111110011101100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01011110101000011101100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01011110111000011101100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001110111110011101100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000011101100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110111000011101100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
	},
	"frecps": {
		{Op: 0b01011110010000000011110000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01011110001000001111110000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01011110011000001111110000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00001110010000000011110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110001000001111110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000001111110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"frecpx": {
		{Op: 0b01011110111110011111100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01011110101000011111100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01011110111000011111100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"frinta": {
		// FRINTA (vector)
		{Op: 0b00101110011110011000100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110001000011000100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011000011000100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		// FRINTA (scalar)
		{Op: 0b00011110111001100100000000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110001001100100000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110011001100100000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"frinti": {
		// FRINTI (vector)
		{Op: 0b00101110111110011001100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101000011001100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110111000011001100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		// FRINTI (scalar)
		{Op: 0b00011110111001111100000000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110001001111100000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110011001111100000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"frintm": {
		// FRINTM (vector)
		{Op: 0b00001110011110011001100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110001000011001100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000011001100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		// FRINTM (scalar)
		{Op: 0b00011110111001010100000000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110001001010100000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110011001010100000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"frintn": {
		// FRINTN (vector)
		{Op: 0b00001110011110011000100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110001000011000100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000011000100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		// FRINTN (scalar)
		{Op: 0b00011110111001000100000000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110001001000100000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110011001000100000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"frintp": {
		// FRINTP (vector)
		{Op: 0b00001110111110011000100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000011000100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110111000011000100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		// FRINTP (scalar)
		{Op: 0b00011110111001001100000000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110001001001100000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110011001001100000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"frintx": {
		// FRINTX (vector)
		{Op: 0b00101110011110011001100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110001000011001100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011000011001100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		// FRINTX (scalar)
		{Op: 0b00011110111001110100000000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110001001110100000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110011001110100000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"frintz": {
		// FRINTZ (vector)
		{Op: 0b00001110111110011001100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000011001100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110111000011001100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		// FRINTZ (scalar)
		{Op: 0b00011110111001011100000000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110001001011100000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110011001011100000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"frsqrte": {
		{Op: 0b01111110111110011101100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01111110101000011101100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01111110111000011101100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00101110111110011101100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101000011101100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110111000011101100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
	},
	"frsqrts": {
		{Op: 0b01011110110000000011110000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01011110101000001111110000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01011110111000001111110000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00001110110000000011110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000001111110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110111000001111110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"fsqrt": {
		// FSQRT (vector)
		{Op: 0b00101110111110011111100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101000011111100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110111000011111100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		// FSQRT (scalar)
		{Op: 0b00011110111000011100000000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110001000011100000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110011000011100000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"fsub": {
		// FSUB (vector)
		{Op: 0b00001110110000000001010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000001101010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110111000001101010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		// FSUB (scalar)
		{Op: 0b00011110111000000011100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00011110001000000011100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00011110011000000011100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"hint": {
		{Op: 0b11010101000000110010000000011111,
			Match: []arm.EncOp{mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdUbits, 5, 7)}},
	},
	"hlt": {
		{Op: 0b11010100010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdUbits, 5, 16)}},
	},
	"hvc": {
		{Op: 0b11010100000000000000000000000010,
			Match: []arm.EncOp{mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdUbits, 5, 16)}},
	},
	"ic": {
		{Op: 0b11010101000010110111010100100000,
			Match: []arm.EncOp{mat(arm.MatLitSymbol, uint8(arm.IVAU)), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0)}},
		{Op: 0b11010101000010000111000000011111,
			Match: []arm.EncOp{mat(arm.MatSymbol)},
			Cmds:  []arm.EncOp{cmd(arm.CmdLitList, 5, arm.SymICOPS)}},
	},
	"ins": {
		// INS (element)
		{Op: 0b01101110000000010000010000000000,
			Match: []arm.EncOp{mat(arm.MatVElement, uint8(arm.BYTE)), mat(arm.MatVElement, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUbits, 17, 4), cmd(arm.CmdR5), cmd(arm.CmdUbits, 11, 4)}},
		{Op: 0b01101110000000100000010000000000,
			Match: []arm.EncOp{mat(arm.MatVElement, uint8(arm.WORD)), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUbits, 18, 3), cmd(arm.CmdR5), cmd(arm.CmdUbits, 12, 3)}},
		{Op: 0b01101110000001000000010000000000,
			Match: []arm.EncOp{mat(arm.MatVElement, uint8(arm.DWORD)), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUbits, 19, 2), cmd(arm.CmdR5), cmd(arm.CmdUbits, 13, 2)}},
		{Op: 0b01101110000010000000010000000000,
			Match: []arm.EncOp{mat(arm.MatVElement, uint8(arm.QWORD)), mat(arm.MatVElement, uint8(arm.QWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUbits, 20, 1), cmd(arm.CmdR5), cmd(arm.CmdUbits, 14, 1)}},
		// INS (general)
		{Op: 0b01001110000000010001110000000000,
			Match: []arm.EncOp{mat(arm.MatVElement, uint8(arm.BYTE)), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUbits, 17, 4), cmd(arm.CmdR5)}},
		{Op: 0b01001110000000100001110000000000,
			Match: []arm.EncOp{mat(arm.MatVElement, uint8(arm.WORD)), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUbits, 18, 3), cmd(arm.CmdR5)}},
		{Op: 0b01001110000001000001110000000000,
			Match: []arm.EncOp{mat(arm.MatVElement, uint8(arm.DWORD)), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUbits, 19, 2), cmd(arm.CmdR5)}},
		{Op: 0b01001110000010000001110000000000,
			Match: []arm.EncOp{mat(arm.MatVElement, uint8(arm.QWORD)), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUbits, 20, 1), cmd(arm.CmdR5)}},
	},
	"isb": {
		{Op: 0b11010101000000110011111111011111,
			Match: []arm.EncOp{mat(arm.MatLitSymbol, uint8(arm.SY))},
			Cmds:  []arm.EncOp{}},
		{Op: 0b11010101000000110011000011011111,
			Match: []arm.EncOp{mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdUbits, 8, 4)}},
		{Op: 0b11010101000000110011111111011111,
			Match: []arm.EncOp{},
			Cmds:  []arm.EncOp{}},
	},
	"ld1": {
		// LD1 (multiple structures)
		{Op: 0b00001100010000000111000000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 1, uint8(arm.BYTE)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100010000000111010000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 1, uint8(arm.WORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100010000000111100000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 1, uint8(arm.DWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100010000000111110000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 1, uint8(arm.QWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100010000001010000000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 2, uint8(arm.BYTE)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100010000001010010000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 2, uint8(arm.WORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100010000001010100000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 2, uint8(arm.DWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100010000001010110000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 2, uint8(arm.QWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100010000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 3, uint8(arm.BYTE)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100010000000110010000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 3, uint8(arm.WORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100010000000110100000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 3, uint8(arm.DWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100010000000110110000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 3, uint8(arm.QWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100010000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 4, uint8(arm.BYTE)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100010000000010010000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 4, uint8(arm.WORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100010000000010100000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 4, uint8(arm.DWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100010000000010110000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 4, uint8(arm.QWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100110111110111000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 1, uint8(arm.BYTE), 8), mat(arm.MatRefBase), mat(arm.MatLitInt, 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100110111110111010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 1, uint8(arm.WORD), 4), mat(arm.MatRefBase), mat(arm.MatLitInt, 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100110111110111100000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 1, uint8(arm.DWORD), 2), mat(arm.MatRefBase), mat(arm.MatLitInt, 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100110111110111110000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 1, uint8(arm.QWORD), 1), mat(arm.MatRefBase), mat(arm.MatLitInt, 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100110111110111000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 1, uint8(arm.BYTE), 16), mat(arm.MatRefBase), mat(arm.MatLitInt, 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100110111110111010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 1, uint8(arm.WORD), 8), mat(arm.MatRefBase), mat(arm.MatLitInt, 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100110111110111100000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 1, uint8(arm.DWORD), 4), mat(arm.MatRefBase), mat(arm.MatLitInt, 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100110111110111110000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 1, uint8(arm.QWORD), 2), mat(arm.MatRefBase), mat(arm.MatLitInt, 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100110000000111000000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 1, uint8(arm.BYTE)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100110000000111010000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 1, uint8(arm.WORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100110000000111100000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 1, uint8(arm.DWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100110000000111110000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 1, uint8(arm.QWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100110111111010000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 2, uint8(arm.BYTE), 8), mat(arm.MatRefBase), mat(arm.MatLitInt, 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100110111111010010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 2, uint8(arm.WORD), 4), mat(arm.MatRefBase), mat(arm.MatLitInt, 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100110111111010100000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 2, uint8(arm.DWORD), 2), mat(arm.MatRefBase), mat(arm.MatLitInt, 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100110111111010110000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 2, uint8(arm.QWORD), 1), mat(arm.MatRefBase), mat(arm.MatLitInt, 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100110111111010000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 2, uint8(arm.BYTE), 16), mat(arm.MatRefBase), mat(arm.MatLitInt, 32)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100110111111010010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 2, uint8(arm.WORD), 8), mat(arm.MatRefBase), mat(arm.MatLitInt, 32)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100110111111010100000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 2, uint8(arm.DWORD), 4), mat(arm.MatRefBase), mat(arm.MatLitInt, 32)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100110111111010110000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 2, uint8(arm.QWORD), 2), mat(arm.MatRefBase), mat(arm.MatLitInt, 32)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100110000001010000000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 2, uint8(arm.BYTE)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100110000001010010000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 2, uint8(arm.WORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100110000001010100000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 2, uint8(arm.DWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100110000001010110000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 2, uint8(arm.QWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100110111110110000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 3, uint8(arm.BYTE), 8), mat(arm.MatRefBase), mat(arm.MatLitInt, 24)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100110111110110010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 3, uint8(arm.WORD), 4), mat(arm.MatRefBase), mat(arm.MatLitInt, 24)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100110111110110100000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 3, uint8(arm.DWORD), 2), mat(arm.MatRefBase), mat(arm.MatLitInt, 24)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100110111110110110000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 3, uint8(arm.QWORD), 1), mat(arm.MatRefBase), mat(arm.MatLitInt, 24)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100110111110110000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 3, uint8(arm.BYTE), 16), mat(arm.MatRefBase), mat(arm.MatLitInt, 48)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100110111110110010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 3, uint8(arm.WORD), 8), mat(arm.MatRefBase), mat(arm.MatLitInt, 48)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100110111110110100000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 3, uint8(arm.DWORD), 4), mat(arm.MatRefBase), mat(arm.MatLitInt, 48)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100110111110110110000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 3, uint8(arm.QWORD), 2), mat(arm.MatRefBase), mat(arm.MatLitInt, 48)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100110000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 3, uint8(arm.BYTE)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100110000000110010000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 3, uint8(arm.WORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100110000000110100000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 3, uint8(arm.DWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100110000000110110000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 3, uint8(arm.QWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100110111110010000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 4, uint8(arm.BYTE), 8), mat(arm.MatRefBase), mat(arm.MatLitInt, 32)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100110111110010010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 4, uint8(arm.WORD), 4), mat(arm.MatRefBase), mat(arm.MatLitInt, 32)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100110111110010100000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 4, uint8(arm.DWORD), 2), mat(arm.MatRefBase), mat(arm.MatLitInt, 32)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100110111110010110000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 4, uint8(arm.QWORD), 1), mat(arm.MatRefBase), mat(arm.MatLitInt, 32)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100110111110010000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 4, uint8(arm.BYTE), 16), mat(arm.MatRefBase), mat(arm.MatLitInt, 64)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100110111110010010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 4, uint8(arm.WORD), 8), mat(arm.MatRefBase), mat(arm.MatLitInt, 64)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100110111110010100000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 4, uint8(arm.DWORD), 4), mat(arm.MatRefBase), mat(arm.MatLitInt, 64)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100110111110010110000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 4, uint8(arm.QWORD), 2), mat(arm.MatRefBase), mat(arm.MatLitInt, 64)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100110000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 4, uint8(arm.BYTE)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100110000000010010000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 4, uint8(arm.WORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100110000000010100000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 4, uint8(arm.DWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100110000000010110000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 4, uint8(arm.QWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		// LD1 (single structure)
		{Op: 0b00001101010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 1, uint8(arm.BYTE)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 4), cmd(arm.CmdR5)}},
		{Op: 0b00001101010000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 1, uint8(arm.WORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 3), cmd(arm.CmdR5)}},
		{Op: 0b00001101010000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 1, uint8(arm.DWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 2), cmd(arm.CmdR5)}},
		{Op: 0b00001101010000001000010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 1, uint8(arm.QWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 1), cmd(arm.CmdR5)}},
		{Op: 0b00001101110111110000000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 1, uint8(arm.BYTE)), mat(arm.MatRefBase), mat(arm.MatLitInt, 1)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 4), cmd(arm.CmdR5)}},
		{Op: 0b00001101110000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 1, uint8(arm.BYTE)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 4), cmd(arm.CmdR5), cmd(arm.CmdRNz16)}},
		{Op: 0b00001101110111110100000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 1, uint8(arm.WORD)), mat(arm.MatRefBase), mat(arm.MatLitInt, 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 3), cmd(arm.CmdR5)}},
		{Op: 0b00001101110000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 1, uint8(arm.WORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 3), cmd(arm.CmdR5), cmd(arm.CmdRNz16)}},
		{Op: 0b00001101110111111000000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 1, uint8(arm.DWORD)), mat(arm.MatRefBase), mat(arm.MatLitInt, 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 2), cmd(arm.CmdR5)}},
		{Op: 0b00001101110000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 1, uint8(arm.DWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 2), cmd(arm.CmdR5), cmd(arm.CmdRNz16)}},
		{Op: 0b00001101110111111000010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 1, uint8(arm.QWORD)), mat(arm.MatRefBase), mat(arm.MatLitInt, 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 1), cmd(arm.CmdR5)}},
		{Op: 0b00001101110000001000010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 1, uint8(arm.QWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 1), cmd(arm.CmdR5), cmd(arm.CmdRNz16)}},
	},
	"ld1r": {
		{Op: 0b00001101010000001100000000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 1, uint8(arm.BYTE)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001101010000001100010000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 1, uint8(arm.WORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001101010000001100100000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 1, uint8(arm.DWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001101010000001100110000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 1, uint8(arm.QWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001101110111111100000000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 1, uint8(arm.BYTE)), mat(arm.MatRefBase), mat(arm.MatLitInt, 1)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001101110111111100010000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 1, uint8(arm.WORD)), mat(arm.MatRefBase), mat(arm.MatLitInt, 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001101110111111100100000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 1, uint8(arm.DWORD)), mat(arm.MatRefBase), mat(arm.MatLitInt, 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001101110111111100110000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 1, uint8(arm.QWORD)), mat(arm.MatRefBase), mat(arm.MatLitInt, 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001101110000001100000000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 1, uint8(arm.BYTE)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001101110000001100010000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 1, uint8(arm.WORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001101110000001100100000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 1, uint8(arm.DWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001101110000001100110000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 1, uint8(arm.QWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
	},
	"ld2": {
		// LD2 (multiple structures)
		{Op: 0b00001100010000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 2, uint8(arm.BYTE)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100010000001000010000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 2, uint8(arm.WORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100010000001000100000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 2, uint8(arm.DWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100010000001000110000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 2, uint8(arm.QWORD), 2), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100110111111000000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 2, uint8(arm.BYTE), 8), mat(arm.MatRefBase), mat(arm.MatLitInt, 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100110111111000010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 2, uint8(arm.WORD), 4), mat(arm.MatRefBase), mat(arm.MatLitInt, 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100110111111000100000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 2, uint8(arm.DWORD), 2), mat(arm.MatRefBase), mat(arm.MatLitInt, 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100110111111000000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 2, uint8(arm.BYTE), 16), mat(arm.MatRefBase), mat(arm.MatLitInt, 32)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100110111111000010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 2, uint8(arm.WORD), 8), mat(arm.MatRefBase), mat(arm.MatLitInt, 32)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100110111111000100000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 2, uint8(arm.DWORD), 4), mat(arm.MatRefBase), mat(arm.MatLitInt, 32)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100110111111000110000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 2, uint8(arm.QWORD), 2), mat(arm.MatRefBase), mat(arm.MatLitInt, 32)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100110000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 2, uint8(arm.BYTE)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100110000001000010000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 2, uint8(arm.WORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100110000001000100000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 2, uint8(arm.DWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100110000001000110000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 2, uint8(arm.QWORD), 2), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		// LD2 (single structure)
		{Op: 0b00001101011000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 2, uint8(arm.BYTE)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 4), cmd(arm.CmdR5)}},
		{Op: 0b00001101011000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 2, uint8(arm.WORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 3), cmd(arm.CmdR5)}},
		{Op: 0b00001101011000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 2, uint8(arm.DWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 2), cmd(arm.CmdR5)}},
		{Op: 0b00001101011000001000010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 2, uint8(arm.QWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 1), cmd(arm.CmdR5)}},
		{Op: 0b00001101111111110000000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 2, uint8(arm.BYTE)), mat(arm.MatRefBase), mat(arm.MatLitInt, 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 4), cmd(arm.CmdR5)}},
		{Op: 0b00001101111000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 2, uint8(arm.BYTE)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 4), cmd(arm.CmdR5), cmd(arm.CmdRNz16)}},
		{Op: 0b00001101111111110100000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 2, uint8(arm.WORD)), mat(arm.MatRefBase), mat(arm.MatLitInt, 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 3), cmd(arm.CmdR5)}},
		{Op: 0b00001101111000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 2, uint8(arm.WORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 3), cmd(arm.CmdR5), cmd(arm.CmdRNz16)}},
		{Op: 0b00001101111111111000000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 2, uint8(arm.DWORD)), mat(arm.MatRefBase), mat(arm.MatLitInt, 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 2), cmd(arm.CmdR5)}},
		{Op: 0b00001101111000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 2, uint8(arm.DWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 2), cmd(arm.CmdR5), cmd(arm.CmdRNz16)}},
		{Op: 0b00001101111111111000010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 2, uint8(arm.QWORD)), mat(arm.MatRefBase), mat(arm.MatLitInt, 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 1), cmd(arm.CmdR5)}},
		{Op: 0b00001101111000001000010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 2, uint8(arm.QWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 1), cmd(arm.CmdR5), cmd(arm.CmdRNz16)}},
	},
	"ld2r": {
		{Op: 0b00001101011000001100000000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 2, uint8(arm.BYTE)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001101011000001100010000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 2, uint8(arm.WORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001101011000001100100000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 2, uint8(arm.DWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001101011000001100110000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 2, uint8(arm.QWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001101111111111100000000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 2, uint8(arm.BYTE)), mat(arm.MatRefBase), mat(arm.MatLitInt, 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001101111111111100010000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 2, uint8(arm.WORD)), mat(arm.MatRefBase), mat(arm.MatLitInt, 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001101111111111100100000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 2, uint8(arm.DWORD)), mat(arm.MatRefBase), mat(arm.MatLitInt, 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001101111111111100110000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 2, uint8(arm.QWORD)), mat(arm.MatRefBase), mat(arm.MatLitInt, 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001101111000001100000000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 2, uint8(arm.BYTE)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001101111000001100010000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 2, uint8(arm.WORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001101111000001100100000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 2, uint8(arm.DWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001101111000001100110000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 2, uint8(arm.QWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
	},
	"ld3": {
		// LD3 (multiple structures)
		{Op: 0b00001100010000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 3, uint8(arm.BYTE)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100010000000100010000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 3, uint8(arm.WORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100010000000100100000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 3, uint8(arm.DWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100010000000100110000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 3, uint8(arm.QWORD), 2), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100110111110100000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 3, uint8(arm.BYTE), 8), mat(arm.MatRefBase), mat(arm.MatLitInt, 24)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100110111110100010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 3, uint8(arm.WORD), 4), mat(arm.MatRefBase), mat(arm.MatLitInt, 24)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100110111110100100000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 3, uint8(arm.DWORD), 2), mat(arm.MatRefBase), mat(arm.MatLitInt, 24)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100110111110100000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 3, uint8(arm.BYTE), 16), mat(arm.MatRefBase), mat(arm.MatLitInt, 48)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100110111110100010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 3, uint8(arm.WORD), 8), mat(arm.MatRefBase), mat(arm.MatLitInt, 48)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100110111110100100000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 3, uint8(arm.DWORD), 4), mat(arm.MatRefBase), mat(arm.MatLitInt, 48)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100110111110100110000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 3, uint8(arm.QWORD), 2), mat(arm.MatRefBase), mat(arm.MatLitInt, 48)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100110000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 3, uint8(arm.BYTE)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100110000000100010000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 3, uint8(arm.WORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100110000000100100000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 3, uint8(arm.DWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100110000000100110000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 3, uint8(arm.QWORD), 2), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		// LD3 (single structure)
		{Op: 0b00001101010000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 3, uint8(arm.BYTE)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 4), cmd(arm.CmdR5)}},
		{Op: 0b00001101010000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 3, uint8(arm.WORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 3), cmd(arm.CmdR5)}},
		{Op: 0b00001101010000001010000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 3, uint8(arm.DWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 2), cmd(arm.CmdR5)}},
		{Op: 0b00001101010000001010010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 3, uint8(arm.QWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 1), cmd(arm.CmdR5)}},
		{Op: 0b00001101110111110010000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 3, uint8(arm.BYTE)), mat(arm.MatRefBase), mat(arm.MatLitInt, 3)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 4), cmd(arm.CmdR5)}},
		{Op: 0b00001101110000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 3, uint8(arm.BYTE)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 4), cmd(arm.CmdR5), cmd(arm.CmdRNz16)}},
		{Op: 0b00001101110111110110000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 3, uint8(arm.WORD)), mat(arm.MatRefBase), mat(arm.MatLitInt, 6)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 3), cmd(arm.CmdR5)}},
		{Op: 0b00001101110000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 3, uint8(arm.WORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 3), cmd(arm.CmdR5), cmd(arm.CmdRNz16)}},
		{Op: 0b00001101110111111010000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 3, uint8(arm.DWORD)), mat(arm.MatRefBase), mat(arm.MatLitInt, 12)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 2), cmd(arm.CmdR5)}},
		{Op: 0b00001101110000001010000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 3, uint8(arm.DWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 2), cmd(arm.CmdR5), cmd(arm.CmdRNz16)}},
		{Op: 0b00001101110111111010010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 3, uint8(arm.QWORD)), mat(arm.MatRefBase), mat(arm.MatLitInt, 24)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 1), cmd(arm.CmdR5)}},
		{Op: 0b00001101110000001010010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 3, uint8(arm.QWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 1), cmd(arm.CmdR5), cmd(arm.CmdRNz16)}},
	},
	"ld3r": {
		{Op: 0b00001101010000001110000000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 3, uint8(arm.BYTE)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001101010000001110010000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 3, uint8(arm.WORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001101010000001110100000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 3, uint8(arm.DWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001101010000001110110000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 3, uint8(arm.QWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001101110111111110000000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 3, uint8(arm.BYTE)), mat(arm.MatRefBase), mat(arm.MatLitInt, 3)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001101110111111110010000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 3, uint8(arm.WORD)), mat(arm.MatRefBase), mat(arm.MatLitInt, 6)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001101110111111110100000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 3, uint8(arm.DWORD)), mat(arm.MatRefBase), mat(arm.MatLitInt, 12)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001101110111111110110000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 3, uint8(arm.QWORD)), mat(arm.MatRefBase), mat(arm.MatLitInt, 24)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001101110000001110000000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 3, uint8(arm.BYTE)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001101110000001110010000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 3, uint8(arm.WORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001101110000001110100000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 3, uint8(arm.DWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001101110000001110110000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 3, uint8(arm.QWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
	},
	"ld4": {
		// LD4 (multiple structures)
		{Op: 0b00001100010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 4, uint8(arm.BYTE)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100010000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 4, uint8(arm.WORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100010000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 4, uint8(arm.DWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100010000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 4, uint8(arm.QWORD), 2), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100110111110000000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 4, uint8(arm.BYTE), 8), mat(arm.MatRefBase), mat(arm.MatLitInt, 32)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100110111110000010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 4, uint8(arm.WORD), 4), mat(arm.MatRefBase), mat(arm.MatLitInt, 32)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100110111110000100000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 4, uint8(arm.DWORD), 2), mat(arm.MatRefBase), mat(arm.MatLitInt, 32)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100110111110000000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 4, uint8(arm.BYTE), 16), mat(arm.MatRefBase), mat(arm.MatLitInt, 64)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100110111110000010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 4, uint8(arm.WORD), 8), mat(arm.MatRefBase), mat(arm.MatLitInt, 64)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100110111110000100000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 4, uint8(arm.DWORD), 4), mat(arm.MatRefBase), mat(arm.MatLitInt, 64)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100110111110000110000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 4, uint8(arm.QWORD), 2), mat(arm.MatRefBase), mat(arm.MatLitInt, 64)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100110000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 4, uint8(arm.BYTE)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100110000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 4, uint8(arm.WORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100110000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 4, uint8(arm.DWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100110000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 4, uint8(arm.QWORD), 2), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		// LD4 (single structure)
		{Op: 0b00001101011000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 4, uint8(arm.BYTE)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 4), cmd(arm.CmdR5)}},
		{Op: 0b00001101011000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 4, uint8(arm.WORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 3), cmd(arm.CmdR5)}},
		{Op: 0b00001101011000001010000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 4, uint8(arm.DWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 2), cmd(arm.CmdR5)}},
		{Op: 0b00001101011000001010010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 4, uint8(arm.QWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 1), cmd(arm.CmdR5)}},
		{Op: 0b00001101111111110010000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 4, uint8(arm.BYTE)), mat(arm.MatRefBase), mat(arm.MatLitInt, 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 4), cmd(arm.CmdR5)}},
		{Op: 0b00001101111000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 4, uint8(arm.BYTE)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 4), cmd(arm.CmdR5), cmd(arm.CmdRNz16)}},
		{Op: 0b00001101111111110110000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 4, uint8(arm.WORD)), mat(arm.MatRefBase), mat(arm.MatLitInt, 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 3), cmd(arm.CmdR5)}},
		{Op: 0b00001101111000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 4, uint8(arm.WORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 3), cmd(arm.CmdR5), cmd(arm.CmdRNz16)}},
		{Op: 0b00001101111111111010000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 4, uint8(arm.DWORD)), mat(arm.MatRefBase), mat(arm.MatLitInt, 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 2), cmd(arm.CmdR5)}},
		{Op: 0b00001101111000001010000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 4, uint8(arm.DWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 2), cmd(arm.CmdR5), cmd(arm.CmdRNz16)}},
		{Op: 0b00001101111111111010010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 4, uint8(arm.QWORD)), mat(arm.MatRefBase), mat(arm.MatLitInt, 32)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 1), cmd(arm.CmdR5)}},
		{Op: 0b00001101111000001010010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 4, uint8(arm.QWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 1), cmd(arm.CmdR5), cmd(arm.CmdRNz16)}},
	},
	"ld4r": {
		{Op: 0b00001101011000001110000000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 4, uint8(arm.BYTE)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001101011000001110010000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 4, uint8(arm.WORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001101011000001110100000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 4, uint8(arm.DWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001101011000001110110000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 4, uint8(arm.QWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001101111111111110000000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 4, uint8(arm.BYTE)), mat(arm.MatRefBase), mat(arm.MatLitInt, 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001101111111111110010000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 4, uint8(arm.WORD)), mat(arm.MatRefBase), mat(arm.MatLitInt, 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001101111111111110100000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 4, uint8(arm.DWORD)), mat(arm.MatRefBase), mat(arm.MatLitInt, 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001101111111111110110000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 4, uint8(arm.QWORD)), mat(arm.MatRefBase), mat(arm.MatLitInt, 32)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001101111000001110000000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 4, uint8(arm.BYTE)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001101111000001110010000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 4, uint8(arm.WORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001101111000001110100000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 4, uint8(arm.DWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001101111000001110110000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 4, uint8(arm.QWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
	},
	"ldadd": {
		{Op: 0b10111000001000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11111000001000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldadda": {
		{Op: 0b10111000101000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11111000101000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldaddab": {
		{Op: 0b00111000101000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldaddah": {
		{Op: 0b01111000101000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldaddal": {
		{Op: 0b10111000111000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11111000111000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldaddalb": {
		{Op: 0b00111000111000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldaddalh": {
		{Op: 0b01111000111000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldaddb": {
		{Op: 0b00111000001000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldaddh": {
		{Op: 0b01111000001000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldaddl": {
		{Op: 0b10111000011000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11111000011000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldaddlb": {
		{Op: 0b00111000011000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldaddlh": {
		{Op: 0b01111000011000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldapr": {
		{Op: 0b10111000101111111100000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11111000101111111100000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldaprb": {
		{Op: 0b00111000101111111100000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldaprh": {
		{Op: 0b01111000101111111100000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldapur": {
		{Op: 0b10011001010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b11011001010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
	},
	"ldapurb": {
		{Op: 0b00011001010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
	},
	"ldapurh": {
		{Op: 0b01011001010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
	},
	"ldapursb": {
		{Op: 0b00011001110000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b00011001100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
	},
	"ldapursh": {
		{Op: 0b01011001110000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b01011001100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
	},
	"ldapursw": {
		{Op: 0b10011001100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
	},
	"ldar": {
		{Op: 0b10001000110111111111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11001000110111111111110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldarb": {
		{Op: 0b00001000110111111111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldarh": {
		{Op: 0b01001000110111111111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldaxp": {
		{Op: 0b10001000011111111000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5)}},
		{Op: 0b11001000011111111000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5)}},
	},
	"ldaxr": {
		{Op: 0b10001000010111111111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11001000010111111111110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldaxrb": {
		{Op: 0b00001000010111111111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldaxrh": {
		{Op: 0b01001000010111111111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldclr": {
		{Op: 0b10111000001000000001000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11111000001000000001000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldclra": {
		{Op: 0b10111000101000000001000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11111000101000000001000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldclrab": {
		{Op: 0b00111000101000000001000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldclrah": {
		{Op: 0b01111000101000000001000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldclral": {
		{Op: 0b10111000111000000001000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11111000111000000001000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldclralb": {
		{Op: 0b00111000111000000001000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldclralh": {
		{Op: 0b01111000111000000001000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldclrb": {
		{Op: 0b00111000001000000001000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldclrh": {
		{Op: 0b01111000001000000001000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldclrl": {
		{Op: 0b10111000011000000001000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11111000011000000001000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldclrlb": {
		{Op: 0b00111000011000000001000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldclrlh": {
		{Op: 0b01111000011000000001000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldeor": {
		{Op: 0b10111000001000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11111000001000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldeora": {
		{Op: 0b10111000101000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11111000101000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldeorab": {
		{Op: 0b00111000101000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldeorah": {
		{Op: 0b01111000101000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldeoral": {
		{Op: 0b10111000111000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11111000111000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldeoralb": {
		{Op: 0b00111000111000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldeoralh": {
		{Op: 0b01111000111000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldeorb": {
		{Op: 0b00111000001000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldeorh": {
		{Op: 0b01111000001000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldeorl": {
		{Op: 0b10111000011000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11111000011000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldeorlb": {
		{Op: 0b00111000011000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldeorlh": {
		{Op: 0b01111000011000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldlar": {
		{Op: 0b10001000110111110111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11001000110111110111110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldlarb": {
		{Op: 0b00001000110111110111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldlarh": {
		{Op: 0b01001000110111110111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldnp": {
		// LDNP (SIMD&FP)
		{Op: 0b00101100010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5), cmd(arm.CmdSscaled, 2)}},
		{Op: 0b01101100010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5), cmd(arm.CmdSscaled, 3)}},
		{Op: 0b10101100010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatQ), mat(arm.MatQ), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5), cmd(arm.CmdSscaled, 4)}},
		// LDNP
		{Op: 0b00101000010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5), cmd(arm.CmdSscaled, 2)}},
		{Op: 0b10101000010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5), cmd(arm.CmdSscaled, 3)}},
	},
	"ldp": {
		// LDP (SIMD&FP)
		{Op: 0b00101100110000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatRefBase), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5), cmd(arm.CmdSscaled, 2)}},
		{Op: 0b01101100110000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatRefBase), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5), cmd(arm.CmdSscaled, 3)}},
		{Op: 0b10101100110000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatQ), mat(arm.MatQ), mat(arm.MatRefBase), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5), cmd(arm.CmdSscaled, 4)}},
		{Op: 0b00101101110000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatRefPre)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5), cmd(arm.CmdSscaled, 2)}},
		{Op: 0b01101101110000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatRefPre)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5), cmd(arm.CmdSscaled, 3)}},
		{Op: 0b10101101110000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatQ), mat(arm.MatQ), mat(arm.MatRefPre)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5), cmd(arm.CmdSscaled, 4)}},
		{Op: 0b00101101010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5), cmd(arm.CmdSscaled, 2)}},
		{Op: 0b01101101010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5), cmd(arm.CmdSscaled, 3)}},
		{Op: 0b10101101010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatQ), mat(arm.MatQ), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5), cmd(arm.CmdSscaled, 4)}},
		// LDP
		{Op: 0b00101000110000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5), cmd(arm.CmdSscaled, 2)}},
		{Op: 0b10101000110000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5), cmd(arm.CmdSscaled, 3)}},
		{Op: 0b00101001110000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefPre)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5), cmd(arm.CmdSscaled, 2)}},
		{Op: 0b10101001110000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefPre)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5), cmd(arm.CmdSscaled, 3)}},
		{Op: 0b00101001010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5), cmd(arm.CmdSscaled, 2)}},
		{Op: 0b10101001010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5), cmd(arm.CmdSscaled, 3)}},
	},
	"ldpsw": {
		{Op: 0b01101000110000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5), cmd(arm.CmdSscaled, 2)}},
		{Op: 0b01101001110000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefPre)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5), cmd(arm.CmdSscaled, 2)}},
		{Op: 0b01101001010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5), cmd(arm.CmdSscaled, 2)}},
	},
	"ldr": {
		// LDR (immediate, SIMD&FP)
		{Op: 0b00111100010000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatB), mat(arm.MatRefBase), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b01111100010000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatRefBase), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b10111100010000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatRefBase), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b11111100010000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatRefBase), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b00111100110000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatQ), mat(arm.MatRefBase), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b00111100010000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatB), mat(arm.MatRefPre)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b01111100010000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatRefPre)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b10111100010000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatRefPre)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b11111100010000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatRefPre)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b00111100110000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatQ), mat(arm.MatRefPre)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b00111101010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatB), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 10, 12)}},
		{Op: 0b01111101010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUscaled, 10, 12, 1)}},
		{Op: 0b10111101010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUscaled, 10, 12, 2)}},
		{Op: 0b11111101010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUscaled, 10, 12, 3)}},
		{Op: 0b00111101110000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatQ), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUscaled, 10, 12, 4)}},
		// LDR (immediate)
		{Op: 0b10111000010000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b11111000010000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefBase), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b10111000010000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefPre)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b11111000010000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefPre)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b10111001010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUscaled, 10, 12, 2)}},
		{Op: 0b11111001010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUscaled, 10, 12, 3)}},
		// LDR (literal, SIMD&FP)
		{Op: 0b00011100000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdOffset, arm.RelBCond)}},
		{Op: 0b01011100000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdOffset, arm.RelBCond)}},
		{Op: 0b10011100000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatQ), mat(arm.MatOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdOffset, arm.RelBCond)}},
		// LDR (literal)
		{Op: 0b00011000000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdOffset, arm.RelBCond)}},
		{Op: 0b01011000000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdOffset, arm.RelBCond)}},
		// LDR (register, SIMD&FP)
		{Op: 0b00111100011000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatB), mat(arm.MatRefIndex)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdExtendsX), alt2(12, 0, 0)}},
		{Op: 0b01111100011000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatRefIndex)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdExtendsX), alt2(12, 0, 1)}},
		{Op: 0b10111100011000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatRefIndex)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdExtendsX), alt2(12, 0, 2)}},
		{Op: 0b11111100011000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatRefIndex)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdExtendsX), alt2(12, 0, 3)}},
		{Op: 0b00111100111000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatQ), mat(arm.MatRefIndex)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdExtendsX), alt2(12, 0, 4)}},
		// LDR (register)
		{Op: 0b10111000011000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefIndex)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdExtendsX), alt2(12, 0, 2)}},
		{Op: 0b11111000011000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefIndex)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdExtendsX), alt2(12, 0, 3)}},
	},
	"ldraa": {
		{Op: 0b11111000001000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkSscaled), cmd(arm.CmdSslice, 12, 9, 3), cmd(arm.CmdSslice, 22, 1, 12), cmd(arm.CmdAdv)}},
		{Op: 0b11111000001000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefPre)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkSscaled), cmd(arm.CmdSslice, 12, 9, 3), cmd(arm.CmdSslice, 22, 1, 12), cmd(arm.CmdAdv)}},
	},
	"ldrab": {
		{Op: 0b11111000101000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkSscaled), cmd(arm.CmdSslice, 12, 9, 3), cmd(arm.CmdSslice, 22, 1, 12), cmd(arm.CmdAdv)}},
		{Op: 0b11111000101000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefPre)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkSscaled), cmd(arm.CmdSslice, 12, 9, 3), cmd(arm.CmdSslice, 22, 1, 12), cmd(arm.CmdAdv)}},
	},
	"ldrb": {
		// LDRB (immediate)
		{Op: 0b00111000010000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b00111000010000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefPre)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b00111001010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 10, 12)}},
		// LDRB (register)
		{Op: 0b00111000011000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefIndex)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdExtendsX), alt2(12, 0, 0)}},
	},
	"ldrh": {
		// LDRH (immediate)
		{Op: 0b01111000010000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b01111000010000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefPre)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b01111001010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUscaled, 10, 12, 1)}},
		// LDRH (register)
		{Op: 0b01111000011000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefIndex)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdExtendsX), alt2(12, 0, 1)}},
	},
	"ldrsb": {
		// LDRSB (immediate)
		{Op: 0b00111000110000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b00111000100000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefBase), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b00111000110000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefPre)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b00111000100000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefPre)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b00111001110000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 10, 12)}},
		{Op: 0b00111001100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 10, 12)}},
		// LDRSB (register)
		{Op: 0b00111000111000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefIndex)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdExtendsX), alt2(12, 0, 0)}},
		{Op: 0b00111000101000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefIndex)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdExtendsX), alt2(12, 0, 0)}},
	},
	"ldrsh": {
		// LDRSH (immediate)
		{Op: 0b01111000110000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b01111000100000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefBase), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b01111000110000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefPre)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b01111000100000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefPre)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b01111001110000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUscaled, 10, 12, 1)}},
		{Op: 0b01111001100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUscaled, 10, 12, 1)}},
		// LDRSH (register)
		{Op: 0b01111000111000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefIndex)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdExtendsX), alt2(12, 0, 1)}},
		{Op: 0b01111000101000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefIndex)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdExtendsX), alt2(12, 0, 1)}},
	},
	"ldrsw": {
		// LDRSW (immediate)
		{Op: 0b10111000100000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefBase), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b10111000100000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefPre)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b10111001100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUscaled, 10, 12, 2)}},
		// LDRSW (literal)
		{Op: 0b10011000000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdOffset, arm.RelBCond)}},
		// LDRSW (register)
		{Op: 0b10111000101000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefIndex)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdExtendsX), alt2(12, 0, 2)}},
	},
	"ldset": {
		{Op: 0b10111000001000000011000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11111000001000000011000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldseta": {
		{Op: 0b10111000101000000011000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11111000101000000011000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldsetab": {
		{Op: 0b00111000101000000011000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldsetah": {
		{Op: 0b01111000101000000011000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldsetal": {
		{Op: 0b10111000111000000011000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11111000111000000011000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldsetalb": {
		{Op: 0b00111000111000000011000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldsetalh": {
		{Op: 0b01111000111000000011000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldsetb": {
		{Op: 0b00111000001000000011000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldseth": {
		{Op: 0b01111000001000000011000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldsetl": {
		{Op: 0b10111000011000000011000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11111000011000000011000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldsetlb": {
		{Op: 0b00111000011000000011000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldsetlh": {
		{Op: 0b01111000011000000011000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldsmax": {
		{Op: 0b10111000001000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11111000001000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldsmaxa": {
		{Op: 0b10111000101000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11111000101000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldsmaxab": {
		{Op: 0b00111000101000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldsmaxah": {
		{Op: 0b01111000101000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldsmaxal": {
		{Op: 0b10111000111000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11111000111000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldsmaxalb": {
		{Op: 0b00111000111000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldsmaxalh": {
		{Op: 0b01111000111000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldsmaxb": {
		{Op: 0b00111000001000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldsmaxh": {
		{Op: 0b01111000001000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldsmaxl": {
		{Op: 0b10111000011000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11111000011000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldsmaxlb": {
		{Op: 0b00111000011000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldsmaxlh": {
		{Op: 0b01111000011000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldsmin": {
		{Op: 0b10111000001000000101000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11111000001000000101000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldsmina": {
		{Op: 0b10111000101000000101000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11111000101000000101000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldsminab": {
		{Op: 0b00111000101000000101000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldsminah": {
		{Op: 0b01111000101000000101000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldsminal": {
		{Op: 0b10111000111000000101000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11111000111000000101000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldsminalb": {
		{Op: 0b00111000111000000101000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldsminalh": {
		{Op: 0b01111000111000000101000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldsminb": {
		{Op: 0b00111000001000000101000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldsminh": {
		{Op: 0b01111000001000000101000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldsminl": {
		{Op: 0b10111000011000000101000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11111000011000000101000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldsminlb": {
		{Op: 0b00111000011000000101000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldsminlh": {
		{Op: 0b01111000011000000101000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldtr": {
		{Op: 0b10111000010000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b11111000010000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
	},
	"ldtrb": {
		{Op: 0b00111000010000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
	},
	"ldtrh": {
		{Op: 0b01111000010000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
	},
	"ldtrsb": {
		{Op: 0b00111000110000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b00111000100000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
	},
	"ldtrsh": {
		{Op: 0b01111000110000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b01111000100000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
	},
	"ldtrsw": {
		{Op: 0b10111000100000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
	},
	"ldumax": {
		{Op: 0b10111000001000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11111000001000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldumaxa": {
		{Op: 0b10111000101000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11111000101000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldumaxab": {
		{Op: 0b00111000101000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldumaxah": {
		{Op: 0b01111000101000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldumaxal": {
		{Op: 0b10111000111000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11111000111000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldumaxalb": {
		{Op: 0b00111000111000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldumaxalh": {
		{Op: 0b01111000111000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldumaxb": {
		{Op: 0b00111000001000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldumaxh": {
		{Op: 0b01111000001000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldumaxl": {
		{Op: 0b10111000011000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11111000011000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldumaxlb": {
		{Op: 0b00111000011000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldumaxlh": {
		{Op: 0b01111000011000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldumin": {
		{Op: 0b10111000001000000111000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11111000001000000111000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldumina": {
		{Op: 0b10111000101000000111000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11111000101000000111000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"lduminab": {
		{Op: 0b00111000101000000111000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"lduminah": {
		{Op: 0b01111000101000000111000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"lduminal": {
		{Op: 0b10111000111000000111000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11111000111000000111000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"lduminalb": {
		{Op: 0b00111000111000000111000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"lduminalh": {
		{Op: 0b01111000111000000111000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"lduminb": {
		{Op: 0b00111000001000000111000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"lduminh": {
		{Op: 0b01111000001000000111000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"lduminl": {
		{Op: 0b10111000011000000111000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11111000011000000111000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"lduminlb": {
		{Op: 0b00111000011000000111000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"lduminlh": {
		{Op: 0b01111000011000000111000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldur": {
		// LDUR (SIMD&FP)
		{Op: 0b00111100010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatB), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b01111100010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b10111100010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b11111100010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b00111100110000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatQ), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		// LDUR
		{Op: 0b10111000010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b11111000010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
	},
	"ldurb": {
		{Op: 0b00111000010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
	},
	"ldurh": {
		{Op: 0b01111000010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
	},
	"ldursb": {
		{Op: 0b00111000110000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b00111000100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
	},
	"ldursh": {
		{Op: 0b01111000110000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b01111000100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
	},
	"ldursw": {
		{Op: 0b10111000100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
	},
	"ldxp": {
		{Op: 0b10001000011111110000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5)}},
		{Op: 0b11001000011111110000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5)}},
	},
	"ldxr": {
		{Op: 0b10001000010111110111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11001000010111110111110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldxrb": {
		{Op: 0b00001000010111110111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ldxrh": {
		{Op: 0b01001000010111110111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"lsl": {
		// LSL (register)
		{Op: 0b00011010110000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b10011010110000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		// LSL (immediate)
		{Op: 0b01010011000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUnegmod, 16, 5), cmd(arm.CmdBack), cmd(arm.CmdUsub, 10, 5, 31)}},
		{Op: 0b11010011010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUnegmod, 16, 6), cmd(arm.CmdBack), cmd(arm.CmdUsub, 10, 6, 63)}},
	},
	"lslv": {
		{Op: 0b00011010110000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b10011010110000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"lsr": {
		// LSR (register)
		{Op: 0b00011010110000000010010000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b10011010110000000010010000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		// LSR (immediate)
		{Op: 0b01010011000000000111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 5)}},
		{Op: 0b11010011010000001111110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 6)}},
	},
	"lsrv": {
		{Op: 0b00011010110000000010010000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b10011010110000000010010000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"madd": {
		{Op: 0b00011011000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdR10)}},
		{Op: 0b10011011000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatX), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdR10)}},
	},
	"mla": {
		// MLA (by element)
		{Op: 0b00101111010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101111100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2), cmd(arm.CmdRwidth30)}},
		// MLA (vector)
		{Op: 0b00001110001000001001010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000001001010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000001001010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"mls": {
		// MLS (by element)
		{Op: 0b00101111010000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101111100000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2), cmd(arm.CmdRwidth30)}},
		// MLS (vector)
		{Op: 0b00101110001000001001010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011000001001010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101000001001010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"mneg": {
		{Op: 0b00011011000000001111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b10011011000000001111110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"mov": {
		// MOV (register)
		{Op: 0b00101010000000000000001111100000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR16)}},
		{Op: 0b10101010000000000000001111100000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR16)}},
		// MOV (to/from SP)
		{Op: 0b00010001000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatWSP), mat(arm.MatWSP)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10010001000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatXSP), mat(arm.MatXSP)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		// MOV (scalar)
		{Op: 0b01011110000000010000010000000000,
			Match: []arm.EncOp{mat(arm.MatB), mat(arm.MatVElement, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 17, 4)}},
		{Op: 0b01011110000000100000010000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 18, 3)}},
		{Op: 0b01011110000001000000010000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 19, 2)}},
		{Op: 0b01011110000010000000010000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatVElement, uint8(arm.QWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 20, 1)}},
		// MOV (element)
		{Op: 0b01101110000000010000010000000000,
			Match: []arm.EncOp{mat(arm.MatVElement, uint8(arm.BYTE)), mat(arm.MatVElement, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUbits, 17, 4), cmd(arm.CmdR5), cmd(arm.CmdUbits, 11, 4)}},
		{Op: 0b01101110000000100000010000000000,
			Match: []arm.EncOp{mat(arm.MatVElement, uint8(arm.WORD)), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUbits, 18, 3), cmd(arm.CmdR5), cmd(arm.CmdUbits, 12, 3)}},
		{Op: 0b01101110000001000000010000000000,
			Match: []arm.EncOp{mat(arm.MatVElement, uint8(arm.DWORD)), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUbits, 19, 2), cmd(arm.CmdR5), cmd(arm.CmdUbits, 13, 2)}},
		{Op: 0b01101110000010000000010000000000,
			Match: []arm.EncOp{mat(arm.MatVElement, uint8(arm.QWORD)), mat(arm.MatVElement, uint8(arm.QWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUbits, 20, 1), cmd(arm.CmdR5), cmd(arm.CmdUbits, 14, 1)}},
		// MOV (from general)
		{Op: 0b01001110000000010001110000000000,
			Match: []arm.EncOp{mat(arm.MatVElement, uint8(arm.BYTE)), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUbits, 17, 4), cmd(arm.CmdR5)}},
		{Op: 0b01001110000000100001110000000000,
			Match: []arm.EncOp{mat(arm.MatVElement, uint8(arm.WORD)), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUbits, 18, 3), cmd(arm.CmdR5)}},
		{Op: 0b01001110000001000001110000000000,
			Match: []arm.EncOp{mat(arm.MatVElement, uint8(arm.DWORD)), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUbits, 19, 2), cmd(arm.CmdR5)}},
		{Op: 0b01001110000010000001110000000000,
			Match: []arm.EncOp{mat(arm.MatVElement, uint8(arm.QWORD)), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUbits, 20, 1), cmd(arm.CmdR5)}},
		// MOV (inverted wide immediate)
		{Op: 0b00010010100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatLitSymbol, uint8(arm.INVERTED)), mat(arm.MatW), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdSpecial, 5, arm.SpecialImmWideInv32)}},
		{Op: 0b10010010100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatLitSymbol, uint8(arm.INVERTED)), mat(arm.MatX), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdSpecial, 5, arm.SpecialImmWideInv64)}},
		// MOV (wide immediate)
		{Op: 0b01010010100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdSpecial, 5, arm.SpecialImmWide32)}},
		{Op: 0b11010010100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdSpecial, 5, arm.SpecialImmWide64)}},
		// MOV (vector)
		{Op: 0b00001110101000000001110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdBack), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		// MOV (bitmask immediate)
		{Op: 0b00110010000000000000001111100000,
			Match: []arm.EncOp{mat(arm.MatLitSymbol, uint8(arm.LOGICAL)), mat(arm.MatWSP), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdSpecial, 10, arm.SpecialImmLogical32)}},
		{Op: 0b10110010000000000000001111100000,
			Match: []arm.EncOp{mat(arm.MatLitSymbol, uint8(arm.LOGICAL)), mat(arm.MatXSP), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdSpecial, 10, arm.SpecialImmLogical64)}},
		// MOV (to general)
		{Op: 0b00001110000001000011110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 19, 2)}},
		{Op: 0b01001110000010000011110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatVElement, uint8(arm.QWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 20, 1)}},
	},
	"movi": {
		{Op: 0b00001111000000001110010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatImm), mat(arm.MatEnd), mat(arm.MatLitMod, arm.SymLSL)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdChkUbits, 8), cmd(arm.CmdUslice, 5, 5, 0), cmd(arm.CmdUslice, 16, 3, 5), cmd(arm.CmdAdv), cmd(arm.CmdChkUbits, 0), cmd(arm.CmdAdv), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001111000000001000010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatImm), mat(arm.MatEnd), mat(arm.MatLitMod, arm.SymLSL)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdChkUbits, 8), cmd(arm.CmdUslice, 5, 5, 0), cmd(arm.CmdUslice, 16, 3, 5), cmd(arm.CmdAdv), alt2(13, 0, 8), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001111000000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatImm), mat(arm.MatEnd), mat(arm.MatLitMod, arm.SymLSL)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdChkUbits, 8), cmd(arm.CmdUslice, 5, 5, 0), cmd(arm.CmdUslice, 16, 3, 5), cmd(arm.CmdAdv), alt4(13, 0, 8, 16, 24), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001111000000001100010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatImm), mat(arm.MatLitMod, arm.SymMSL)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdChkUbits, 8), cmd(arm.CmdUslice, 5, 5, 0), cmd(arm.CmdUslice, 16, 3, 5), cmd(arm.CmdAdv), alt2(12, 8, 16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101111000000001110010000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdSpecial, 5, arm.SpecialImmStretched)}},
		{Op: 0b01101111000000001110010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdSpecial, 5, arm.SpecialImmStretched)}},
	},
	"movk": {
		{Op: 0b01110010100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatImm), mat(arm.MatEnd), mat(arm.MatLitMod, arm.SymLSL)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUbits, 5, 16), alt2(21, 0, 16)}},
		{Op: 0b11110010100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatImm), mat(arm.MatEnd), mat(arm.MatLitMod, arm.SymLSL)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUbits, 5, 16), alt4(21, 0, 16, 32, 48)}},
	},
	"movn": {
		{Op: 0b00010010100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatImm), mat(arm.MatEnd), mat(arm.MatLitMod, arm.SymLSL)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUbits, 5, 16), alt2(21, 0, 16)}},
		{Op: 0b10010010100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatImm), mat(arm.MatEnd), mat(arm.MatLitMod, arm.SymLSL)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUbits, 5, 16), alt4(21, 0, 16, 32, 48)}},
	},
	"movz": {
		{Op: 0b01010010100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatImm), mat(arm.MatEnd), mat(arm.MatLitMod, arm.SymLSL)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUbits, 5, 16), alt2(21, 0, 16)}},
		{Op: 0b11010010100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatImm), mat(arm.MatEnd), mat(arm.MatLitMod, arm.SymLSL)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUbits, 5, 16), alt4(21, 0, 16, 32, 48)}},
	},
	"mrs": {
		{Op: 0b11010101001100000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUbits, 5, 15)}},
	},
	"msr": {
		// MSR (immediate)
		{Op: 0b11010101000000000100000000011111,
			Match: []arm.EncOp{mat(arm.MatSymbol), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdLitList, 5, arm.SymMSRIMMOPS), cmd(arm.CmdUbits, 8, 4)}},
		// MSR (register)
		{Op: 0b11010101000100000000000000000000,
			Match: []arm.EncOp{mat(arm.MatImm), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdUbits, 5, 15), cmd(arm.CmdR0)}},
	},
	"msub": {
		{Op: 0b00011011000000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdR10)}},
		{Op: 0b10011011000000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatX), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdR10)}},
	},
	"mul": {
		// MUL (by element)
		{Op: 0b00001111010000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001111100000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2), cmd(arm.CmdRwidth30)}},
		// MUL (vector)
		{Op: 0b00001110001000001001110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000001001110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000001001110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		// MUL
		{Op: 0b00011011000000000111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b10011011000000000111110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"mvn": {
		{Op: 0b00101010001000000000001111100000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatEnd), mat(arm.MatMod, arm.SymShifts)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR16), cmd(arm.CmdRotates), cmd(arm.CmdUbits, 10, 5)}},
		{Op: 0b10101010001000000000001111100000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatEnd), mat(arm.MatMod, arm.SymShifts)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR16), cmd(arm.CmdRotates), cmd(arm.CmdUbits, 10, 6)}},
		{Op: 0b00101110001000000101100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
	},
	"mvni": {
		{Op: 0b00101111000000001000010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatImm), mat(arm.MatEnd), mat(arm.MatLitMod, arm.SymLSL)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdChkUbits, 8), cmd(arm.CmdUslice, 5, 5, 0), cmd(arm.CmdUslice, 16, 3, 5), cmd(arm.CmdAdv), alt2(13, 0, 8), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101111000000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatImm), mat(arm.MatEnd), mat(arm.MatLitMod, arm.SymLSL)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdChkUbits, 8), cmd(arm.CmdUslice, 5, 5, 0), cmd(arm.CmdUslice, 16, 3, 5), cmd(arm.CmdAdv), alt4(13, 0, 8, 16, 24), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101111000000001100010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatImm), mat(arm.MatLitMod, arm.SymMSL)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdChkUbits, 8), cmd(arm.CmdUslice, 5, 5, 0), cmd(arm.CmdUslice, 16, 3, 5), cmd(arm.CmdAdv), alt2(12, 8, 16), cmd(arm.CmdRwidth30)}},
	},
	"neg": {
		// NEG (shifted register)
		{Op: 0b01001011000000000000001111100000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatEnd), mat(arm.MatMod, arm.SymShifts)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR16), cmd(arm.CmdRotates), cmd(arm.CmdUbits, 10, 5)}},
		{Op: 0b11001011000000000000001111100000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatEnd), mat(arm.MatMod, arm.SymShifts)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR16), cmd(arm.CmdRotates), cmd(arm.CmdUbits, 10, 6)}},
		// NEG (vector)
		{Op: 0b01111110111000001011100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00101110001000001011100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011000001011100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101000001011100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110111000001011100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
	},
	"negs": {
		{Op: 0b01101011000000000000001111100000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatEnd), mat(arm.MatMod, arm.SymShifts)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR16), cmd(arm.CmdRotates), cmd(arm.CmdUbits, 10, 5)}},
		{Op: 0b11101011000000000000001111100000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatEnd), mat(arm.MatMod, arm.SymShifts)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR16), cmd(arm.CmdRotates), cmd(arm.CmdUbits, 10, 6)}},
	},
	"ngc": {
		{Op: 0b01011010000000000000001111100000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR16)}},
		{Op: 0b11011010000000000000001111100000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR16)}},
	},
	"ngcs": {
		{Op: 0b01111010000000000000001111100000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR16)}},
		{Op: 0b11111010000000000000001111100000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR16)}},
	},
	"nop": {
		{Op: 0b11010101000000110010000000011111,
			Match: []arm.EncOp{},
			Cmds:  []arm.EncOp{}},
	},
	"not": {
		{Op: 0b00101110001000000101100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
	},
	"orn": {
		// ORN (vector)
		{Op: 0b00001110111000000001110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		// ORN (shifted register)
		{Op: 0b00101010001000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW), mat(arm.MatEnd), mat(arm.MatMod, arm.SymRotates)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRotates), cmd(arm.CmdUbits, 10, 5)}},
		{Op: 0b10101010001000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatX), mat(arm.MatEnd), mat(arm.MatMod, arm.SymRotates)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRotates), cmd(arm.CmdUbits, 10, 6)}},
	},
	"orr": {
		// ORR (vector, mkmat(Immediate)
		{Op: 0b00001111000000001001010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatImm), mat(arm.MatEnd), mat(arm.MatLitMod, arm.SymLSL)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdChkUbits, 8), cmd(arm.CmdUslice, 5, 5, 0), cmd(arm.CmdUslice, 16, 3, 5), cmd(arm.CmdAdv), alt2(13, 0, 8), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001111000000000001010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatImm), mat(arm.MatEnd), mat(arm.MatLitMod, arm.SymLSL)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdChkUbits, 8), cmd(arm.CmdUslice, 5, 5, 0), cmd(arm.CmdUslice, 16, 3, 5), cmd(arm.CmdAdv), alt4(13, 0, 8, 16, 24), cmd(arm.CmdRwidth30)}},
		// ORR (vector, register)
		{Op: 0b00001110101000000001110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		// ORR (immediate)
		{Op: 0b00110010000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatWSP), mat(arm.MatW), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSpecial, 10, arm.SpecialImmLogical32)}},
		{Op: 0b10110010000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatXSP), mat(arm.MatX), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSpecial, 10, arm.SpecialImmLogical64)}},
		// ORR (shifted register)
		{Op: 0b00101010000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW), mat(arm.MatEnd), mat(arm.MatMod, arm.SymRotates)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRotates), cmd(arm.CmdUbits, 10, 5)}},
		{Op: 0b10101010000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatX), mat(arm.MatEnd), mat(arm.MatMod, arm.SymRotates)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRotates), cmd(arm.CmdUbits, 10, 6)}},
	},
	"pacda": {
		{Op: 0b11011010110000010000100000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatXSP)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"pacdb": {
		{Op: 0b11011010110000010000110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatXSP)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"pacdza": {
		{Op: 0b11011010110000010010101111100000,
			Match: []arm.EncOp{mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0)}},
	},
	"pacdzb": {
		{Op: 0b11011010110000010010111111100000,
			Match: []arm.EncOp{mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0)}},
	},
	"pacga": {
		{Op: 0b10011010110000000011000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatXSP)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"pacia": {
		{Op: 0b11011010110000010000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatXSP)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"pacia1716": {
		{Op: 0b11010101000000110010000100011111,
			Match: []arm.EncOp{},
			Cmds:  []arm.EncOp{}},
	},
	"paciasp": {
		{Op: 0b11010101000000110010001100111111,
			Match: []arm.EncOp{},
			Cmds:  []arm.EncOp{}},
	},
	"paciaz": {
		{Op: 0b11010101000000110010001100011111,
			Match: []arm.EncOp{},
			Cmds:  []arm.EncOp{}},
	},
	"pacib": {
		{Op: 0b11011010110000010000010000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatXSP)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"pacib1716": {
		{Op: 0b11010101000000110010000101011111,
			Match: []arm.EncOp{},
			Cmds:  []arm.EncOp{}},
	},
	"pacibsp": {
		{Op: 0b11010101000000110010001101111111,
			Match: []arm.EncOp{},
			Cmds:  []arm.EncOp{}},
	},
	"pacibz": {
		{Op: 0b11010101000000110010001101011111,
			Match: []arm.EncOp{},
			Cmds:  []arm.EncOp{}},
	},
	"paciza": {
		{Op: 0b11011010110000010010001111100000,
			Match: []arm.EncOp{mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0)}},
	},
	"pacizb": {
		{Op: 0b11011010110000010010011111100000,
			Match: []arm.EncOp{mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0)}},
	},
	"pmul": {
		{Op: 0b00101110001000001001110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"pmull": {
		{Op: 0b00001110001000001110000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00001110111000001110000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.OWORD), 1), mat(arm.MatVStatic, uint8(arm.QWORD), 1), mat(arm.MatVStatic, uint8(arm.QWORD), 1)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"pmull2": {
		{Op: 0b01001110001000001110000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.BYTE), 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01001110111000001110000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.OWORD), 1), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"prfm": {
		// PRFM (literal)
		{Op: 0b11011000000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatImm), mat(arm.MatOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdUbits, 0, 5), cmd(arm.CmdOffset, arm.RelBCond)}},
		// PRFM (register)
		{Op: 0b11111000101000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatImm), mat(arm.MatRefIndex)},
			Cmds:  []arm.EncOp{cmd(arm.CmdUbits, 0, 5), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdExtendsX), alt2(12, 0, 3)}},
	},
	"prfum": {
		{Op: 0b11111000100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatImm), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdUbits, 0, 5), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
	},
	"psb": {
		{Op: 0b11010101000000110010001000111111,
			Match: []arm.EncOp{mat(arm.MatLitSymbol, uint8(arm.CSYNC))},
			Cmds:  []arm.EncOp{}},
	},
	"pssbb": {
		{Op: 0b11010101000000110011010010011111,
			Match: []arm.EncOp{},
			Cmds:  []arm.EncOp{}},
	},
	"raddhn": {
		{Op: 0b00101110001000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.BYTE), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00101110011000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00101110101000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"raddhn2": {
		{Op: 0b01101110001000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01101110011000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01101110101000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"rax1": {
		{Op: 0b11001110011000001000110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"rbit": {
		// RBIT (vector)
		{Op: 0b00101110011000000101100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		// RBIT
		{Op: 0b01011010110000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11011010110000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"ret": {
		{Op: 0b11010110010111110000000000000000,
			Match: []arm.EncOp{mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5)}},
		{Op: 0b11010110010111110000001111000000,
			Match: []arm.EncOp{},
			Cmds:  []arm.EncOp{}},
	},
	"retaa": {
		{Op: 0b11010110010111110000101111111111,
			Match: []arm.EncOp{},
			Cmds:  []arm.EncOp{}},
	},
	"retab": {
		{Op: 0b11010110010111110000111111111111,
			Match: []arm.EncOp{},
			Cmds:  []arm.EncOp{}},
	},
	"rev": {
		{Op: 0b01011010110000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11011010110000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"rev16": {
		// REV16 (vector)
		{Op: 0b00001110001000000001100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		// REV16
		{Op: 0b01011010110000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11011010110000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"rev32": {
		// REV32 (vector)
		{Op: 0b00101110001000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		// REV32
		{Op: 0b11011010110000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"rev64": {
		{Op: 0b00001110001000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b11011010110000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"rmif": {
		{Op: 0b10111010000000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatImm), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5), cmd(arm.CmdUbits, 15, 6), cmd(arm.CmdUbits, 0, 4)}},
	},
	"ror": {
		// ROR (immediate)
		{Op: 0b00010011100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdBack), cmd(arm.CmdR16), cmd(arm.CmdUbits, 10, 5)}},
		{Op: 0b10010011110000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdBack), cmd(arm.CmdR16), cmd(arm.CmdUbits, 10, 6)}},
		// ROR (register)
		{Op: 0b00011010110000000010110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b10011010110000000010110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"rorv": {
		{Op: 0b00011010110000000010110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b10011010110000000010110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"rshrn": {
		{Op: 0b00001111000010001000110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.BYTE), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 3, 8)}},
		{Op: 0b00001111000100001000110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 4, 16)}},
		{Op: 0b00001111001000001000110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 5, 32)}},
	},
	"rshrn2": {
		{Op: 0b01001111000010001000110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 3, 8)}},
		{Op: 0b01001111000100001000110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 4, 16)}},
		{Op: 0b01001111001000001000110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 5, 32)}},
	},
	"rsubhn": {
		{Op: 0b00101110001000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.BYTE), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00101110011000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00101110101000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"rsubhn2": {
		{Op: 0b01101110001000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01101110011000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01101110101000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"saba": {
		{Op: 0b00001110001000000111110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000000111110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000000111110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"sabal": {
		{Op: 0b00001110001000000101000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00001110011000000101000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00001110101000000101000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"sabal2": {
		{Op: 0b01001110001000000101000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.BYTE), 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01001110011000000101000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01001110101000000101000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"sabd": {
		{Op: 0b00001110001000000111010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000000111010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000000111010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"sabdl": {
		{Op: 0b00001110001000000111000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00001110011000000111000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00001110101000000111000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"sabdl2": {
		{Op: 0b01001110001000000111000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.BYTE), 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01001110011000000111000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01001110101000000111000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"sadalp": {
		{Op: 0b00001110001000000110100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000000110100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000000110100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.QWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
	},
	"saddl": {
		{Op: 0b00001110001000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00001110011000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00001110101000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"saddl2": {
		{Op: 0b01001110001000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.BYTE), 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01001110011000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01001110101000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"saddlp": {
		{Op: 0b00001110001000000010100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000000010100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000000010100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.QWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
	},
	"saddlv": {
		{Op: 0b00001110001100000011100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011100000011100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101100000011100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
	},
	"saddw": {
		{Op: 0b00001110001000000001000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00001110011000000001000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00001110101000000001000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"saddw2": {
		{Op: 0b01001110001000000001000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01001110011000000001000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01001110101000000001000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"sb": {
		{Op: 0b11010101000000110011000011111111,
			Match: []arm.EncOp{},
			Cmds:  []arm.EncOp{}},
	},
	"sbc": {
		{Op: 0b01011010000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b11011010000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"sbcs": {
		{Op: 0b01111010000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b11111010000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"sbfiz": {
		{Op: 0b00010011000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatImm), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUnegmod, 16, 5), cmd(arm.CmdChkUsum, 5), cmd(arm.CmdUrange, 10, 1, 32)}},
		{Op: 0b10010011010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatImm), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUnegmod, 16, 6), cmd(arm.CmdChkUsum, 6), cmd(arm.CmdUrange, 10, 1, 64)}},
	},
	"sbfm": {
		{Op: 0b00010011000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatImm), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 5), cmd(arm.CmdUbits, 10, 5)}},
		{Op: 0b10010011010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatImm), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 6), cmd(arm.CmdChkUsum, 6), cmd(arm.CmdUbits, 10, 6)}},
	},
	"sbfx": {
		{Op: 0b00010011000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatImm), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 5), cmd(arm.CmdChkUsum, 5), cmd(arm.CmdUsumdec, 10, 5)}},
		{Op: 0b10010011010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatImm), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 6), cmd(arm.CmdChkUsum, 6), cmd(arm.CmdUsumdec, 10, 6)}},
	},
	"scvtf": {
		// SCVTF (vector, fixed-point)
		{Op: 0b01011111000000001110010000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 16), cmd(arm.CmdUsub, 16, 5, 32)}},
		{Op: 0b01011111000000001110010000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 32), cmd(arm.CmdUsub, 16, 6, 64)}},
		{Op: 0b01011111000000001110010000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 64), cmd(arm.CmdUsub, 16, 7, 128)}},
		{Op: 0b00001111000100001110010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 4, 16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001111001000001110010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 5, 32), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001111010000001110010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 6, 64), cmd(arm.CmdRwidth30)}},
		// SCVTF (vector, integer)
		{Op: 0b01011110011110011101100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01011110001000011101100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01011110011000011101100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001110011110011101100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110001000011101100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000011101100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		// SCVTF (scalar, fixed-point)
		{Op: 0b00011110110000100000000000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatW), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 32), cmd(arm.CmdUsub, 10, 6, 64)}},
		{Op: 0b00011110000000100000000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatW), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 32), cmd(arm.CmdUsub, 10, 6, 64)}},
		{Op: 0b00011110010000100000000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatW), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 32), cmd(arm.CmdUsub, 10, 6, 64)}},
		{Op: 0b10011110110000100000000000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatX), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 10, 6, 64)}},
		{Op: 0b10011110000000100000000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatX), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 10, 6, 64)}},
		{Op: 0b10011110010000100000000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatX), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 10, 6, 64)}},
		// SCVTF (scalar, integer)
		{Op: 0b00011110111000100000000000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110001000100000000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110011000100000000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10011110111000100000000000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10011110001000100000000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10011110011000100000000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"sdiv": {
		{Op: 0b00011010110000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b10011010110000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"sdot": {
		// SDOT (by element)
		{Op: 0b00001111100000001110000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.BYTE), 8), mat(arm.MatVStaticElement, uint8(arm.BYTE), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2)}},
		{Op: 0b01001111100000001110000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStaticElement, uint8(arm.BYTE), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2)}},
		// SDOT (vector)
		{Op: 0b00001110100000001001010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.BYTE), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01001110100000001001010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.BYTE), 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"setf16": {
		{Op: 0b00111010000000000100100000001101,
			Match: []arm.EncOp{mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5)}},
	},
	"setf8": {
		{Op: 0b00111010000000000000100000001101,
			Match: []arm.EncOp{mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5)}},
	},
	"sev": {
		{Op: 0b11010101000000110010000010011111,
			Match: []arm.EncOp{},
			Cmds:  []arm.EncOp{}},
	},
	"sevl": {
		{Op: 0b11010101000000110010000010111111,
			Match: []arm.EncOp{},
			Cmds:  []arm.EncOp{}},
	},
	"sha1c": {
		{Op: 0b01011110000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatQ), mat(arm.MatS), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"sha1h": {
		{Op: 0b01011110001010000000100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"sha1m": {
		{Op: 0b01011110000000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatQ), mat(arm.MatS), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"sha1p": {
		{Op: 0b01011110000000000001000000000000,
			Match: []arm.EncOp{mat(arm.MatQ), mat(arm.MatS), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"sha1su0": {
		{Op: 0b01011110000000000011000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"sha1su1": {
		{Op: 0b01011110001010000001100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"sha256h": {
		{Op: 0b01011110000000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatQ), mat(arm.MatQ), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"sha256h2": {
		{Op: 0b01011110000000000101000000000000,
			Match: []arm.EncOp{mat(arm.MatQ), mat(arm.MatQ), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"sha256su0": {
		{Op: 0b01011110001010000010100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"sha256su1": {
		{Op: 0b01011110000000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"sha512h": {
		{Op: 0b11001110011000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatQ), mat(arm.MatQ), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"sha512h2": {
		{Op: 0b11001110011000001000010000000000,
			Match: []arm.EncOp{mat(arm.MatQ), mat(arm.MatQ), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"sha512su0": {
		{Op: 0b11001110110000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"sha512su1": {
		{Op: 0b11001110011000001000100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"shadd": {
		{Op: 0b00001110001000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"shl": {
		{Op: 0b01011111010000000101010000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 6)}},
		{Op: 0b00001111000010000101010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 3), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001111000100000101010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 4), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001111001000000101010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001111010000000101010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 6), cmd(arm.CmdRwidth30)}},
	},
	"shll": {
		{Op: 0b00101110001000010011100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 8), mat(arm.MatLitInt, 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00101110011000010011100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatLitInt, 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00101110101000010011100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatLitInt, 32)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"shll2": {
		{Op: 0b01101110001000010011100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatLitInt, 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01101110011000010011100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatLitInt, 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01101110101000010011100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatLitInt, 32)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"shrn": {
		{Op: 0b00001111000010001000010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.BYTE), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 3, 8)}},
		{Op: 0b00001111000100001000010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 4, 16)}},
		{Op: 0b00001111001000001000010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 5, 32)}},
	},
	"shrn2": {
		{Op: 0b01001111000010001000010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 3, 8)}},
		{Op: 0b01001111000100001000010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 4, 16)}},
		{Op: 0b01001111001000001000010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 5, 32)}},
	},
	"shsub": {
		{Op: 0b00001110001000000010010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000000010010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000000010010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"sli": {
		{Op: 0b01111111010000000101010000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 6)}},
		{Op: 0b00101111000010000101010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 3), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101111000100000101010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 4), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101111001000000101010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101111010000000101010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 6), cmd(arm.CmdRwidth30)}},
	},
	"sm3partw1": {
		{Op: 0b11001110011000001100000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"sm3partw2": {
		{Op: 0b11001110011000001100010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"sm3ss1": {
		{Op: 0b11001110010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdR10)}},
	},
	"sm3tt1a": {
		{Op: 0b11001110010000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUbits, 12, 2)}},
	},
	"sm3tt1b": {
		{Op: 0b11001110010000001000010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUbits, 12, 2)}},
	},
	"sm3tt2a": {
		{Op: 0b11001110010000001000100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUbits, 12, 2)}},
	},
	"sm3tt2b": {
		{Op: 0b11001110010000001000110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUbits, 12, 2)}},
	},
	"sm4e": {
		{Op: 0b11001110110000001000010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"sm4ekey": {
		{Op: 0b11001110011000001100100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"smaddl": {
		{Op: 0b10011011001000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatW), mat(arm.MatW), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdR10)}},
	},
	"smax": {
		{Op: 0b00001110001000000110010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000000110010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000000110010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"smaxp": {
		{Op: 0b00001110001000001010010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000001010010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000001010010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"smaxv": {
		{Op: 0b00001110001100001010100000000000,
			Match: []arm.EncOp{mat(arm.MatB), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011100001010100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101100001010100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
	},
	"smc": {
		{Op: 0b11010100000000000000000000000011,
			Match: []arm.EncOp{mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdUbits, 5, 16)}},
	},
	"smin": {
		{Op: 0b00001110001000000110110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000000110110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000000110110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"sminp": {
		{Op: 0b00001110001000001010110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000001010110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000001010110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"sminv": {
		{Op: 0b00001110001100011010100000000000,
			Match: []arm.EncOp{mat(arm.MatB), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011100011010100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101100011010100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
	},
	"smlal": {
		// SMLAL, SMLAL2 (by element)
		{Op: 0b00001111010000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3)}},
		{Op: 0b00001111100000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2)}},
		// SMLAL, SMLAL2 (vector)
		{Op: 0b00001110001000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00001110011000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00001110101000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"smlal2": {
		// SMLAL, SMLAL2 (by element)
		{Op: 0b01001111010000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3)}},
		{Op: 0b01001111100000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2)}},
		// SMLAL, SMLAL2 (vector)
		{Op: 0b01001110001000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.BYTE), 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01001110011000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01001110101000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"smlsl": {
		// SMLSL, SMLSL2 (by element)
		{Op: 0b00001111010000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3)}},
		{Op: 0b00001111100000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2)}},
		// SMLSL, SMLSL2 (vector)
		{Op: 0b00001110001000001010000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00001110011000001010000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00001110101000001010000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"smlsl2": {
		// SMLSL, SMLSL2 (by element)
		{Op: 0b01001111010000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3)}},
		{Op: 0b01001111100000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2)}},
		// SMLSL, SMLSL2 (vector)
		{Op: 0b01001110001000001010000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.BYTE), 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01001110011000001010000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01001110101000001010000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"smnegl": {
		{Op: 0b10011011001000001111110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatW), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"smov": {
		{Op: 0b00001110000000010010110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatVElement, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 17, 4)}},
		{Op: 0b00001110000000100010110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 18, 3)}},
		{Op: 0b01001110000000010010110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatVElement, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 17, 4)}},
		{Op: 0b01001110000000100010110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 18, 3)}},
		{Op: 0b01001110000001000010110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 19, 2)}},
	},
	"smsubl": {
		{Op: 0b10011011001000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatW), mat(arm.MatW), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdR10)}},
	},
	"smulh": {
		{Op: 0b10011011010000000111110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"smull": {
		// SMULL, SMULL2 (by element)
		{Op: 0b00001111010000001010000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3)}},
		{Op: 0b00001111100000001010000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2)}},
		// SMULL, SMULL2 (vector)
		{Op: 0b00001110001000001100000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00001110011000001100000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00001110101000001100000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		// SMULL
		{Op: 0b10011011001000000111110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatW), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"smull2": {
		// SMULL, SMULL2 (by element)
		{Op: 0b01001111010000001010000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3)}},
		{Op: 0b01001111100000001010000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2)}},
		// SMULL, SMULL2 (vector)
		{Op: 0b01001110001000001100000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.BYTE), 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01001110011000001100000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01001110101000001100000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"sqabs": {
		{Op: 0b01011110001000000111100000000000,
			Match: []arm.EncOp{mat(arm.MatB), mat(arm.MatB)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01011110011000000111100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01011110101000000111100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01011110111000000111100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001110001000000111100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000000111100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000000111100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110111000000111100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
	},
	"sqadd": {
		{Op: 0b01011110001000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatB), mat(arm.MatB), mat(arm.MatB)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01011110011000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01011110101000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01011110111000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00001110001000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110111000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"sqdmlal": {
		// SQDMLAL, SQDMLAL2 (by element)
		{Op: 0b01011111010000000011000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatH), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3)}},
		{Op: 0b01011111100000000011000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatS), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2)}},
		{Op: 0b00001111010000000011000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3)}},
		{Op: 0b00001111100000000011000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2)}},
		// SQDMLAL, SQDMLAL2 (vector)
		{Op: 0b01011110011000001001000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01011110101000001001000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00001110011000001001000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00001110101000001001000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"sqdmlal2": {
		// SQDMLAL, SQDMLAL2 (by element)
		{Op: 0b01001111010000000011000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3)}},
		{Op: 0b01001111100000000011000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2)}},
		// SQDMLAL, SQDMLAL2 (vector)
		{Op: 0b01001110011000001001000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01001110101000001001000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"sqdmlsl": {
		// SQDMLSL, SQDMLSL2 (by element)
		{Op: 0b01011111010000000111000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatH), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3)}},
		{Op: 0b01011111100000000111000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatS), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2)}},
		{Op: 0b00001111010000000111000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3)}},
		{Op: 0b00001111100000000111000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2)}},
		// SQDMLSL, SQDMLSL2 (vector)
		{Op: 0b01011110011000001011000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01011110101000001011000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00001110011000001011000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00001110101000001011000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"sqdmlsl2": {
		// SQDMLSL, SQDMLSL2 (by element)
		{Op: 0b01001111010000000111000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3)}},
		{Op: 0b01001111100000000111000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2)}},
		// SQDMLSL, SQDMLSL2 (vector)
		{Op: 0b01001110011000001011000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01001110101000001011000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"sqdmulh": {
		// SQDMULH (by element)
		{Op: 0b01011111010000001100000000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3)}},
		{Op: 0b01011111100000001100000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2)}},
		{Op: 0b00001111010000001100000000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001111100000001100000000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2), cmd(arm.CmdRwidth30)}},
		// SQDMULH (vector)
		{Op: 0b01011110011000001011010000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01011110101000001011010000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00001110011000001011010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000001011010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"sqdmull": {
		// SQDMULL, SQDMULL2 (by element)
		{Op: 0b01011111010000001011000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatH), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3)}},
		{Op: 0b01011111100000001011000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatS), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2)}},
		{Op: 0b00001111010000001011000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3)}},
		{Op: 0b00001111100000001011000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2)}},
		// SQDMULL, SQDMULL2 (vector)
		{Op: 0b01011110011000001101000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01011110101000001101000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00001110011000001101000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00001110101000001101000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"sqdmull2": {
		// SQDMULL, SQDMULL2 (by element)
		{Op: 0b01001111010000001011000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3)}},
		{Op: 0b01001111100000001011000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2)}},
		// SQDMULL, SQDMULL2 (vector)
		{Op: 0b01001110011000001101000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01001110101000001101000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"sqneg": {
		{Op: 0b01111110001000000111100000000000,
			Match: []arm.EncOp{mat(arm.MatB), mat(arm.MatB)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01111110011000000111100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01111110101000000111100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01111110111000000111100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00101110001000000111100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011000000111100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101000000111100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110111000000111100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
	},
	"sqrdmlah": {
		// SQRDMLAH (by element)
		{Op: 0b01111111010000001101000000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3)}},
		{Op: 0b01111111100000001101000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2)}},
		{Op: 0b00101111010000001101000000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101111100000001101000000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2), cmd(arm.CmdRwidth30)}},
		// SQRDMLAH (vector)
		{Op: 0b01111110010000001000010000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01111110100000001000010000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00101110010000001000010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110100000001000010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"sqrdmlsh": {
		// SQRDMLSH (by element)
		{Op: 0b01111111010000001111000000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3)}},
		{Op: 0b01111111100000001111000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2)}},
		{Op: 0b00101111010000001111000000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101111100000001111000000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2), cmd(arm.CmdRwidth30)}},
		// SQRDMLSH (vector)
		{Op: 0b01111110010000001000110000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01111110100000001000110000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00101110010000001000110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110100000001000110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"sqrdmulh": {
		// SQRDMULH (by element)
		{Op: 0b01011111010000001101000000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3)}},
		{Op: 0b01011111100000001101000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2)}},
		{Op: 0b00001111010000001101000000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001111100000001101000000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2), cmd(arm.CmdRwidth30)}},
		// SQRDMULH (vector)
		{Op: 0b01111110011000001011010000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01111110101000001011010000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00101110011000001011010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101000001011010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"sqrshl": {
		{Op: 0b01011110001000000101110000000000,
			Match: []arm.EncOp{mat(arm.MatB), mat(arm.MatB), mat(arm.MatB)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01011110011000000101110000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01011110101000000101110000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01011110111000000101110000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00001110001000000101110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000000101110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000000101110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110111000000101110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"sqrshrn": {
		{Op: 0b01011111000000001001110000000000,
			Match: []arm.EncOp{mat(arm.MatB), mat(arm.MatH), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 8), cmd(arm.CmdUsub, 16, 4, 16)}},
		{Op: 0b01011111000000001001110000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatS), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 16), cmd(arm.CmdUsub, 16, 5, 32)}},
		{Op: 0b01011111000000001001110000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatD), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 32), cmd(arm.CmdUsub, 16, 6, 64)}},
		{Op: 0b00001111000010001001110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.BYTE), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 3, 8)}},
		{Op: 0b00001111000100001001110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 4, 16)}},
		{Op: 0b00001111001000001001110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 5, 32)}},
	},
	"sqrshrn2": {
		{Op: 0b01001111000010001001110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 3, 8)}},
		{Op: 0b01001111000100001001110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 4, 16)}},
		{Op: 0b01001111001000001001110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 5, 32)}},
	},
	"sqrshrun": {
		{Op: 0b01111111000000001000110000000000,
			Match: []arm.EncOp{mat(arm.MatB), mat(arm.MatH), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 8), cmd(arm.CmdUsub, 16, 4, 16)}},
		{Op: 0b01111111000000001000110000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatS), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 16), cmd(arm.CmdUsub, 16, 5, 32)}},
		{Op: 0b01111111000000001000110000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatD), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 32), cmd(arm.CmdUsub, 16, 6, 64)}},
		{Op: 0b00101111000010001000110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.BYTE), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 3, 8)}},
		{Op: 0b00101111000100001000110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 4, 16)}},
		{Op: 0b00101111001000001000110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 5, 32)}},
	},
	"sqrshrun2": {
		{Op: 0b01101111000010001000110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 3, 8)}},
		{Op: 0b01101111000100001000110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 4, 16)}},
		{Op: 0b01101111001000001000110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 5, 32)}},
	},
	"sqshl": {
		// SQSHL (immediate)
		{Op: 0b01011111000010000111010000000000,
			Match: []arm.EncOp{mat(arm.MatB), mat(arm.MatB), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 3)}},
		{Op: 0b01011111000100000111010000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 4)}},
		{Op: 0b01011111001000000111010000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 5)}},
		{Op: 0b01011111010000000111010000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 6)}},
		{Op: 0b00001111000010000111010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 3), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001111000100000111010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 4), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001111001000000111010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001111010000000111010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 6), cmd(arm.CmdRwidth30)}},
		// SQSHL (register)
		{Op: 0b01011110001000000100110000000000,
			Match: []arm.EncOp{mat(arm.MatB), mat(arm.MatB), mat(arm.MatB)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01011110011000000100110000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01011110101000000100110000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01011110111000000100110000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00001110001000000100110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000000100110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000000100110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110111000000100110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"sqshlu": {
		{Op: 0b01111111000010000110010000000000,
			Match: []arm.EncOp{mat(arm.MatB), mat(arm.MatB), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 3)}},
		{Op: 0b01111111000100000110010000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 4)}},
		{Op: 0b01111111001000000110010000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 5)}},
		{Op: 0b01111111010000000110010000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 6)}},
		{Op: 0b00101111000010000110010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 3), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101111000100000110010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 4), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101111001000000110010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101111010000000110010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 6), cmd(arm.CmdRwidth30)}},
	},
	"sqshrn": {
		{Op: 0b01011111000000001001010000000000,
			Match: []arm.EncOp{mat(arm.MatB), mat(arm.MatH), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 8), cmd(arm.CmdUsub, 16, 4, 16)}},
		{Op: 0b01011111000000001001010000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatS), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 16), cmd(arm.CmdUsub, 16, 5, 32)}},
		{Op: 0b01011111000000001001010000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatD), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 32), cmd(arm.CmdUsub, 16, 6, 64)}},
		{Op: 0b00001111000010001001010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.BYTE), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 3, 8)}},
		{Op: 0b00001111000100001001010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 4, 16)}},
		{Op: 0b00001111001000001001010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 5, 32)}},
	},
	"sqshrn2": {
		{Op: 0b01001111000010001001010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 3, 8)}},
		{Op: 0b01001111000100001001010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 4, 16)}},
		{Op: 0b01001111001000001001010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 5, 32)}},
	},
	"sqshrun": {
		{Op: 0b01111111000000001000010000000000,
			Match: []arm.EncOp{mat(arm.MatB), mat(arm.MatH), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 8), cmd(arm.CmdUsub, 16, 4, 16)}},
		{Op: 0b01111111000000001000010000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatS), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 16), cmd(arm.CmdUsub, 16, 5, 32)}},
		{Op: 0b01111111000000001000010000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatD), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 32), cmd(arm.CmdUsub, 16, 6, 64)}},
		{Op: 0b00101111000010001000010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.BYTE), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 3, 8)}},
		{Op: 0b00101111000100001000010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 4, 16)}},
		{Op: 0b00101111001000001000010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 5, 32)}},
	},
	"sqshrun2": {
		{Op: 0b01101111000010001000010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 3, 8)}},
		{Op: 0b01101111000100001000010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 4, 16)}},
		{Op: 0b01101111001000001000010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 5, 32)}},
	},
	"sqsub": {
		{Op: 0b01011110001000000010110000000000,
			Match: []arm.EncOp{mat(arm.MatB), mat(arm.MatB), mat(arm.MatB)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01011110011000000010110000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01011110101000000010110000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01011110111000000010110000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00001110001000000010110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000000010110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000000010110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110111000000010110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"sqxtn": {
		{Op: 0b01011110001000010100100000000000,
			Match: []arm.EncOp{mat(arm.MatB), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01011110011000010100100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01011110101000010100100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001110001000010100100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.BYTE), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001110011000010100100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001110101000010100100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"sqxtn2": {
		{Op: 0b01001110001000010100100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.WORD), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001110011000010100100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001110101000010100100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"sqxtun": {
		{Op: 0b01111110001000010010100000000000,
			Match: []arm.EncOp{mat(arm.MatB), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01111110011000010010100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01111110101000010010100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00101110001000010010100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.BYTE), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00101110011000010010100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00101110101000010010100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"sqxtun2": {
		{Op: 0b01101110001000010010100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.WORD), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01101110011000010010100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01101110101000010010100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"srhadd": {
		{Op: 0b00001110001000000001010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000000001010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000000001010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"sri": {
		{Op: 0b01111111000000000100010000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 64), cmd(arm.CmdUsub, 16, 7, 128)}},
		{Op: 0b00101111000010000100010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 3, 8), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101111000100000100010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 4, 16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101111001000000100010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 5, 32), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101111010000000100010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 6, 64), cmd(arm.CmdRwidth30)}},
	},
	"srshl": {
		{Op: 0b01011110111000000101010000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00001110001000000101010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000000101010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000000101010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110111000000101010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"srshr": {
		{Op: 0b01011111000000000010010000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 64), cmd(arm.CmdUsub, 16, 7, 128)}},
		{Op: 0b00001111000010000010010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 3, 8), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001111000100000010010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 4, 16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001111001000000010010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 5, 32), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001111010000000010010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 6, 64), cmd(arm.CmdRwidth30)}},
	},
	"srsra": {
		{Op: 0b01011111000000000011010000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 64), cmd(arm.CmdUsub, 16, 7, 128)}},
		{Op: 0b00001111000010000011010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 3, 8), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001111000100000011010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 4, 16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001111001000000011010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 5, 32), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001111010000000011010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 6, 64), cmd(arm.CmdRwidth30)}},
	},
	"ssbb": {
		{Op: 0b11010101000000110011000010011111,
			Match: []arm.EncOp{},
			Cmds:  []arm.EncOp{}},
	},
	"sshl": {
		{Op: 0b01011110111000000100010000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00001110001000000100010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000000100010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000000100010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110111000000100010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"sshll": {
		{Op: 0b00001111000010001010010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 8), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 3)}},
		{Op: 0b00001111000100001010010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 4)}},
		{Op: 0b00001111001000001010010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 5)}},
	},
	"sshll2": {
		{Op: 0b01001111000010001010010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 3)}},
		{Op: 0b01001111000100001010010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 4)}},
		{Op: 0b01001111001000001010010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 5)}},
	},
	"sshr": {
		{Op: 0b01011111000000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 64), cmd(arm.CmdUsub, 16, 7, 128)}},
		{Op: 0b00001111000010000000010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 3, 8), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001111000100000000010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 4, 16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001111001000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 5, 32), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001111010000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 6, 64), cmd(arm.CmdRwidth30)}},
	},
	"ssra": {
		{Op: 0b01011111000000000001010000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 64), cmd(arm.CmdUsub, 16, 7, 128)}},
		{Op: 0b00001111000010000001010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 3, 8), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001111000100000001010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 4, 16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001111001000000001010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 5, 32), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001111010000000001010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 6, 64), cmd(arm.CmdRwidth30)}},
	},
	"ssubl": {
		{Op: 0b00001110001000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00001110011000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00001110101000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"ssubl2": {
		{Op: 0b01001110001000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.BYTE), 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01001110011000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01001110101000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"ssubw": {
		{Op: 0b00001110001000000011000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00001110011000000011000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00001110101000000011000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"ssubw2": {
		{Op: 0b01001110001000000011000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01001110011000000011000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01001110101000000011000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"st1": {
		// ST1 (multiple structures)
		{Op: 0b00001100000000000111000000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 1, uint8(arm.BYTE)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100000000000111010000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 1, uint8(arm.WORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100000000000111100000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 1, uint8(arm.DWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100000000000111110000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 1, uint8(arm.QWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100000000001010000000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 2, uint8(arm.BYTE)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100000000001010010000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 2, uint8(arm.WORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100000000001010100000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 2, uint8(arm.DWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100000000001010110000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 2, uint8(arm.QWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100000000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 3, uint8(arm.BYTE)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100000000000110010000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 3, uint8(arm.WORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100000000000110100000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 3, uint8(arm.DWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100000000000110110000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 3, uint8(arm.QWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100000000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 4, uint8(arm.BYTE)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100000000000010010000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 4, uint8(arm.WORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100000000000010100000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 4, uint8(arm.DWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100000000000010110000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 4, uint8(arm.QWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100100111110111000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 1, uint8(arm.BYTE), 8), mat(arm.MatRefBase), mat(arm.MatLitInt, 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100100111110111010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 1, uint8(arm.WORD), 4), mat(arm.MatRefBase), mat(arm.MatLitInt, 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100100111110111100000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 1, uint8(arm.DWORD), 2), mat(arm.MatRefBase), mat(arm.MatLitInt, 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100100111110111110000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 1, uint8(arm.QWORD), 1), mat(arm.MatRefBase), mat(arm.MatLitInt, 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100100111110111000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 1, uint8(arm.BYTE), 16), mat(arm.MatRefBase), mat(arm.MatLitInt, 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100100111110111010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 1, uint8(arm.WORD), 8), mat(arm.MatRefBase), mat(arm.MatLitInt, 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100100111110111100000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 1, uint8(arm.DWORD), 4), mat(arm.MatRefBase), mat(arm.MatLitInt, 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100100111110111110000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 1, uint8(arm.QWORD), 2), mat(arm.MatRefBase), mat(arm.MatLitInt, 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100100000000111000000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 1, uint8(arm.BYTE)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100100000000111010000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 1, uint8(arm.WORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100100000000111100000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 1, uint8(arm.DWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100100000000111110000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 1, uint8(arm.QWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100100111111010000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 2, uint8(arm.BYTE), 8), mat(arm.MatRefBase), mat(arm.MatLitInt, 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100100111111010010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 2, uint8(arm.WORD), 4), mat(arm.MatRefBase), mat(arm.MatLitInt, 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100100111111010100000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 2, uint8(arm.DWORD), 2), mat(arm.MatRefBase), mat(arm.MatLitInt, 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100100111111010110000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 2, uint8(arm.QWORD), 1), mat(arm.MatRefBase), mat(arm.MatLitInt, 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100100111111010000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 2, uint8(arm.BYTE), 16), mat(arm.MatRefBase), mat(arm.MatLitInt, 32)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100100111111010010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 2, uint8(arm.WORD), 8), mat(arm.MatRefBase), mat(arm.MatLitInt, 32)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100100111111010100000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 2, uint8(arm.DWORD), 4), mat(arm.MatRefBase), mat(arm.MatLitInt, 32)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100100111111010110000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 2, uint8(arm.QWORD), 2), mat(arm.MatRefBase), mat(arm.MatLitInt, 32)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100100000001010000000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 2, uint8(arm.BYTE)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100100000001010010000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 2, uint8(arm.WORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100100000001010100000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 2, uint8(arm.DWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100100000001010110000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 2, uint8(arm.QWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100100111110110000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 3, uint8(arm.BYTE), 8), mat(arm.MatRefBase), mat(arm.MatLitInt, 24)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100100111110110010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 3, uint8(arm.WORD), 4), mat(arm.MatRefBase), mat(arm.MatLitInt, 24)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100100111110110100000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 3, uint8(arm.DWORD), 2), mat(arm.MatRefBase), mat(arm.MatLitInt, 24)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100100111110110110000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 3, uint8(arm.QWORD), 1), mat(arm.MatRefBase), mat(arm.MatLitInt, 24)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100100111110110000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 3, uint8(arm.BYTE), 16), mat(arm.MatRefBase), mat(arm.MatLitInt, 48)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100100111110110010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 3, uint8(arm.WORD), 8), mat(arm.MatRefBase), mat(arm.MatLitInt, 48)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100100111110110100000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 3, uint8(arm.DWORD), 4), mat(arm.MatRefBase), mat(arm.MatLitInt, 48)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100100111110110110000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 3, uint8(arm.QWORD), 2), mat(arm.MatRefBase), mat(arm.MatLitInt, 48)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100100000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 3, uint8(arm.BYTE)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100100000000110010000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 3, uint8(arm.WORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100100000000110100000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 3, uint8(arm.DWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100100000000110110000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 3, uint8(arm.QWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100100111110010000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 4, uint8(arm.BYTE), 8), mat(arm.MatRefBase), mat(arm.MatLitInt, 32)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100100111110010010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 4, uint8(arm.WORD), 4), mat(arm.MatRefBase), mat(arm.MatLitInt, 32)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100100111110010100000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 4, uint8(arm.DWORD), 2), mat(arm.MatRefBase), mat(arm.MatLitInt, 32)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100100111110010110000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 4, uint8(arm.QWORD), 1), mat(arm.MatRefBase), mat(arm.MatLitInt, 32)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100100111110010000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 4, uint8(arm.BYTE), 16), mat(arm.MatRefBase), mat(arm.MatLitInt, 64)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100100111110010010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 4, uint8(arm.WORD), 8), mat(arm.MatRefBase), mat(arm.MatLitInt, 64)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100100111110010100000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 4, uint8(arm.DWORD), 4), mat(arm.MatRefBase), mat(arm.MatLitInt, 64)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100100111110010110000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 4, uint8(arm.QWORD), 2), mat(arm.MatRefBase), mat(arm.MatLitInt, 64)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100100000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 4, uint8(arm.BYTE)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100100000000010010000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 4, uint8(arm.WORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100100000000010100000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 4, uint8(arm.DWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100100000000010110000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 4, uint8(arm.QWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		// ST1 (single structure)
		{Op: 0b00001101000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 1, uint8(arm.BYTE)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 4), cmd(arm.CmdR5)}},
		{Op: 0b00001101000000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 1, uint8(arm.WORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 3), cmd(arm.CmdR5)}},
		{Op: 0b00001101000000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 1, uint8(arm.DWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 2), cmd(arm.CmdR5)}},
		{Op: 0b00001101000000001000010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 1, uint8(arm.QWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 1), cmd(arm.CmdR5)}},
		{Op: 0b00001101100111110000000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 1, uint8(arm.BYTE)), mat(arm.MatRefBase), mat(arm.MatLitInt, 1)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 4), cmd(arm.CmdR5)}},
		{Op: 0b00001101100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 1, uint8(arm.BYTE)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 4), cmd(arm.CmdR5), cmd(arm.CmdRNz16)}},
		{Op: 0b00001101100111110100000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 1, uint8(arm.WORD)), mat(arm.MatRefBase), mat(arm.MatLitInt, 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 3), cmd(arm.CmdR5)}},
		{Op: 0b00001101100000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 1, uint8(arm.WORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 3), cmd(arm.CmdR5), cmd(arm.CmdRNz16)}},
		{Op: 0b00001101100111111000000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 1, uint8(arm.DWORD)), mat(arm.MatRefBase), mat(arm.MatLitInt, 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 2), cmd(arm.CmdR5)}},
		{Op: 0b00001101100000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 1, uint8(arm.DWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 2), cmd(arm.CmdR5), cmd(arm.CmdRNz16)}},
		{Op: 0b00001101100111111000010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 1, uint8(arm.QWORD)), mat(arm.MatRefBase), mat(arm.MatLitInt, 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 1), cmd(arm.CmdR5)}},
		{Op: 0b00001101100000001000010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 1, uint8(arm.QWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 1), cmd(arm.CmdR5), cmd(arm.CmdRNz16)}},
	},
	"st2": {
		// ST2 (multiple structures)
		{Op: 0b00001100000000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 2, uint8(arm.BYTE)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100000000001000010000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 2, uint8(arm.WORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100000000001000100000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 2, uint8(arm.DWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100000000001000110000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 2, uint8(arm.QWORD), 2), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100100111111000000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 2, uint8(arm.BYTE), 8), mat(arm.MatRefBase), mat(arm.MatLitInt, 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100100111111000010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 2, uint8(arm.WORD), 4), mat(arm.MatRefBase), mat(arm.MatLitInt, 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100100111111000100000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 2, uint8(arm.DWORD), 2), mat(arm.MatRefBase), mat(arm.MatLitInt, 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100100111111000000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 2, uint8(arm.BYTE), 16), mat(arm.MatRefBase), mat(arm.MatLitInt, 32)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100100111111000010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 2, uint8(arm.WORD), 8), mat(arm.MatRefBase), mat(arm.MatLitInt, 32)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100100111111000100000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 2, uint8(arm.DWORD), 4), mat(arm.MatRefBase), mat(arm.MatLitInt, 32)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100100111111000110000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 2, uint8(arm.QWORD), 2), mat(arm.MatRefBase), mat(arm.MatLitInt, 32)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100100000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 2, uint8(arm.BYTE)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100100000001000010000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 2, uint8(arm.WORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100100000001000100000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 2, uint8(arm.DWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100100000001000110000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 2, uint8(arm.QWORD), 2), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		// ST2 (single structure)
		{Op: 0b00001101001000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 2, uint8(arm.BYTE)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 4), cmd(arm.CmdR5)}},
		{Op: 0b00001101001000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 2, uint8(arm.WORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 3), cmd(arm.CmdR5)}},
		{Op: 0b00001101001000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 2, uint8(arm.DWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 2), cmd(arm.CmdR5)}},
		{Op: 0b00001101001000001000010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 2, uint8(arm.QWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 1), cmd(arm.CmdR5)}},
		{Op: 0b00001101101111110000000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 2, uint8(arm.BYTE)), mat(arm.MatRefBase), mat(arm.MatLitInt, 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 4), cmd(arm.CmdR5)}},
		{Op: 0b00001101101000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 2, uint8(arm.BYTE)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 4), cmd(arm.CmdR5), cmd(arm.CmdRNz16)}},
		{Op: 0b00001101101111110100000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 2, uint8(arm.WORD)), mat(arm.MatRefBase), mat(arm.MatLitInt, 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 3), cmd(arm.CmdR5)}},
		{Op: 0b00001101101000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 2, uint8(arm.WORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 3), cmd(arm.CmdR5), cmd(arm.CmdRNz16)}},
		{Op: 0b00001101101111111000000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 2, uint8(arm.DWORD)), mat(arm.MatRefBase), mat(arm.MatLitInt, 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 2), cmd(arm.CmdR5)}},
		{Op: 0b00001101101000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 2, uint8(arm.DWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 2), cmd(arm.CmdR5), cmd(arm.CmdRNz16)}},
		{Op: 0b00001101101111111000010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 2, uint8(arm.QWORD)), mat(arm.MatRefBase), mat(arm.MatLitInt, 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 1), cmd(arm.CmdR5)}},
		{Op: 0b00001101101000001000010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 2, uint8(arm.QWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 1), cmd(arm.CmdR5), cmd(arm.CmdRNz16)}},
	},
	"st3": {
		// ST3 (multiple structures)
		{Op: 0b00001100000000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 3, uint8(arm.BYTE)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100000000000100010000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 3, uint8(arm.WORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100000000000100100000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 3, uint8(arm.DWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100000000000100110000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 3, uint8(arm.QWORD), 2), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100100111110100000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 3, uint8(arm.BYTE), 8), mat(arm.MatRefBase), mat(arm.MatLitInt, 24)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100100111110100010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 3, uint8(arm.WORD), 4), mat(arm.MatRefBase), mat(arm.MatLitInt, 24)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100100111110100100000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 3, uint8(arm.DWORD), 2), mat(arm.MatRefBase), mat(arm.MatLitInt, 24)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100100111110100000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 3, uint8(arm.BYTE), 16), mat(arm.MatRefBase), mat(arm.MatLitInt, 48)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100100111110100010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 3, uint8(arm.WORD), 8), mat(arm.MatRefBase), mat(arm.MatLitInt, 48)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100100111110100100000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 3, uint8(arm.DWORD), 4), mat(arm.MatRefBase), mat(arm.MatLitInt, 48)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100100111110100110000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 3, uint8(arm.QWORD), 2), mat(arm.MatRefBase), mat(arm.MatLitInt, 48)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100100000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 3, uint8(arm.BYTE)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100100000000100010000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 3, uint8(arm.WORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100100000000100100000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 3, uint8(arm.DWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100100000000100110000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 3, uint8(arm.QWORD), 2), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		// ST3 (single structure)
		{Op: 0b00001101000000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 3, uint8(arm.BYTE)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 4), cmd(arm.CmdR5)}},
		{Op: 0b00001101000000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 3, uint8(arm.WORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 3), cmd(arm.CmdR5)}},
		{Op: 0b00001101000000001010000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 3, uint8(arm.DWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 2), cmd(arm.CmdR5)}},
		{Op: 0b00001101000000001010010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 3, uint8(arm.QWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 1), cmd(arm.CmdR5)}},
		{Op: 0b00001101100111110010000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 3, uint8(arm.BYTE)), mat(arm.MatRefBase), mat(arm.MatLitInt, 3)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 4), cmd(arm.CmdR5)}},
		{Op: 0b00001101100000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 3, uint8(arm.BYTE)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 4), cmd(arm.CmdR5), cmd(arm.CmdRNz16)}},
		{Op: 0b00001101100111110110000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 3, uint8(arm.WORD)), mat(arm.MatRefBase), mat(arm.MatLitInt, 6)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 3), cmd(arm.CmdR5)}},
		{Op: 0b00001101100000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 3, uint8(arm.WORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 3), cmd(arm.CmdR5), cmd(arm.CmdRNz16)}},
		{Op: 0b00001101100111111010000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 3, uint8(arm.DWORD)), mat(arm.MatRefBase), mat(arm.MatLitInt, 12)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 2), cmd(arm.CmdR5)}},
		{Op: 0b00001101100000001010000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 3, uint8(arm.DWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 2), cmd(arm.CmdR5), cmd(arm.CmdRNz16)}},
		{Op: 0b00001101100111111010010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 3, uint8(arm.QWORD)), mat(arm.MatRefBase), mat(arm.MatLitInt, 24)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 1), cmd(arm.CmdR5)}},
		{Op: 0b00001101100000001010010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 3, uint8(arm.QWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 1), cmd(arm.CmdR5), cmd(arm.CmdRNz16)}},
	},
	"st4": {
		// ST4 (multiple structures)
		{Op: 0b00001100000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 4, uint8(arm.BYTE)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100000000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 4, uint8(arm.WORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100000000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 4, uint8(arm.DWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100000000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 4, uint8(arm.QWORD), 2), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100100111110000000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 4, uint8(arm.BYTE), 8), mat(arm.MatRefBase), mat(arm.MatLitInt, 32)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100100111110000010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 4, uint8(arm.WORD), 4), mat(arm.MatRefBase), mat(arm.MatLitInt, 32)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100100111110000100000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 4, uint8(arm.DWORD), 2), mat(arm.MatRefBase), mat(arm.MatLitInt, 32)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100100111110000000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 4, uint8(arm.BYTE), 16), mat(arm.MatRefBase), mat(arm.MatLitInt, 64)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100100111110000010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 4, uint8(arm.WORD), 8), mat(arm.MatRefBase), mat(arm.MatLitInt, 64)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100100111110000100000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 4, uint8(arm.DWORD), 4), mat(arm.MatRefBase), mat(arm.MatLitInt, 64)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001100100111110000110000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 4, uint8(arm.QWORD), 2), mat(arm.MatRefBase), mat(arm.MatLitInt, 64)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001100100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 4, uint8(arm.BYTE)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100100000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 4, uint8(arm.WORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100100000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatRegList, 4, uint8(arm.DWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001100100000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatRegListStatic, 4, uint8(arm.QWORD), 2), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRNz16), cmd(arm.CmdRwidth30)}},
		// ST4 (single structure)
		{Op: 0b00001101001000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 4, uint8(arm.BYTE)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 4), cmd(arm.CmdR5)}},
		{Op: 0b00001101001000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 4, uint8(arm.WORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 3), cmd(arm.CmdR5)}},
		{Op: 0b00001101001000001010000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 4, uint8(arm.DWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 2), cmd(arm.CmdR5)}},
		{Op: 0b00001101001000001010010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 4, uint8(arm.QWORD)), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 1), cmd(arm.CmdR5)}},
		{Op: 0b00001101101111110010000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 4, uint8(arm.BYTE)), mat(arm.MatRefBase), mat(arm.MatLitInt, 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 4), cmd(arm.CmdR5)}},
		{Op: 0b00001101101000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 4, uint8(arm.BYTE)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 4), cmd(arm.CmdR5), cmd(arm.CmdRNz16)}},
		{Op: 0b00001101101111110110000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 4, uint8(arm.WORD)), mat(arm.MatRefBase), mat(arm.MatLitInt, 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 3), cmd(arm.CmdR5)}},
		{Op: 0b00001101101000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 4, uint8(arm.WORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 3), cmd(arm.CmdR5), cmd(arm.CmdRNz16)}},
		{Op: 0b00001101101111111010000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 4, uint8(arm.DWORD)), mat(arm.MatRefBase), mat(arm.MatLitInt, 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 2), cmd(arm.CmdR5)}},
		{Op: 0b00001101101000001010000000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 4, uint8(arm.DWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 2), cmd(arm.CmdR5), cmd(arm.CmdRNz16)}},
		{Op: 0b00001101101111111010010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 4, uint8(arm.QWORD)), mat(arm.MatRefBase), mat(arm.MatLitInt, 32)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 1), cmd(arm.CmdR5)}},
		{Op: 0b00001101101000001010010000000000,
			Match: []arm.EncOp{mat(arm.MatRegListElement, 4, uint8(arm.QWORD)), mat(arm.MatRefBase), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUfields30, 1), cmd(arm.CmdR5), cmd(arm.CmdRNz16)}},
	},
	"stadd": {
		{Op: 0b10111000001000000000000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
		{Op: 0b11111000001000000000000000011111,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"staddb": {
		{Op: 0b00111000001000000000000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"staddh": {
		{Op: 0b01111000001000000000000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"staddl": {
		{Op: 0b10111000011000000000000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
		{Op: 0b11111000011000000000000000011111,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"staddlb": {
		{Op: 0b00111000011000000000000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"staddlh": {
		{Op: 0b01111000011000000000000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"stclr": {
		{Op: 0b10111000001000000001000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
		{Op: 0b11111000001000000001000000011111,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"stclrb": {
		{Op: 0b00111000001000000001000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"stclrh": {
		{Op: 0b01111000001000000001000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"stclrl": {
		{Op: 0b10111000011000000001000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
		{Op: 0b11111000011000000001000000011111,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"stclrlb": {
		{Op: 0b00111000011000000001000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"stclrlh": {
		{Op: 0b01111000011000000001000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"steor": {
		{Op: 0b10111000001000000010000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
		{Op: 0b11111000001000000010000000011111,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"steorb": {
		{Op: 0b00111000001000000010000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"steorh": {
		{Op: 0b01111000001000000010000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"steorl": {
		{Op: 0b10111000011000000010000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
		{Op: 0b11111000011000000010000000011111,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"steorlb": {
		{Op: 0b00111000011000000010000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"steorlh": {
		{Op: 0b01111000011000000010000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"stllr": {
		{Op: 0b10001000100111110111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11001000100111110111110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"stllrb": {
		{Op: 0b00001000100111110111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"stllrh": {
		{Op: 0b01001000100111110111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"stlr": {
		{Op: 0b10001000100111111111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11001000100111111111110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"stlrb": {
		{Op: 0b00001000100111111111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"stlrh": {
		{Op: 0b01001000100111111111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"stlur": {
		{Op: 0b10011001000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b11011001000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
	},
	"stlurb": {
		{Op: 0b00011001000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
	},
	"stlurh": {
		{Op: 0b01011001000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
	},
	"stlxp": {
		{Op: 0b10001000001000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5)}},
		{Op: 0b11001000001000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5)}},
	},
	"stlxr": {
		{Op: 0b10001000000000001111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11001000000000001111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"stlxrb": {
		{Op: 0b00001000000000001111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"stlxrh": {
		{Op: 0b01001000000000001111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"stnp": {
		// STNP (SIMD&FP)
		{Op: 0b00101100000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5), cmd(arm.CmdSscaled, 2)}},
		{Op: 0b01101100000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5), cmd(arm.CmdSscaled, 3)}},
		{Op: 0b10101100000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatQ), mat(arm.MatQ), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5), cmd(arm.CmdSscaled, 4)}},
		// STNP
		{Op: 0b00101000000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5), cmd(arm.CmdSscaled, 2)}},
		{Op: 0b10101000000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5), cmd(arm.CmdSscaled, 3)}},
	},
	"stp": {
		// STP (SIMD&FP)
		{Op: 0b00101100100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatRefBase), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5), cmd(arm.CmdSscaled, 2)}},
		{Op: 0b01101100100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatRefBase), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5), cmd(arm.CmdSscaled, 3)}},
		{Op: 0b10101100100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatQ), mat(arm.MatQ), mat(arm.MatRefBase), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5), cmd(arm.CmdSscaled, 4)}},
		{Op: 0b00101101100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatRefPre)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5), cmd(arm.CmdSscaled, 2)}},
		{Op: 0b01101101100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatRefPre)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5), cmd(arm.CmdSscaled, 3)}},
		{Op: 0b10101101100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatQ), mat(arm.MatQ), mat(arm.MatRefPre)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5), cmd(arm.CmdSscaled, 4)}},
		{Op: 0b00101101000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5), cmd(arm.CmdSscaled, 2)}},
		{Op: 0b01101101000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5), cmd(arm.CmdSscaled, 3)}},
		{Op: 0b10101101000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatQ), mat(arm.MatQ), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5), cmd(arm.CmdSscaled, 4)}},
		// STP
		{Op: 0b00101000100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5), cmd(arm.CmdSscaled, 2)}},
		{Op: 0b10101000100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5), cmd(arm.CmdSscaled, 3)}},
		{Op: 0b00101001100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefPre)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5), cmd(arm.CmdSscaled, 2)}},
		{Op: 0b10101001100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefPre)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5), cmd(arm.CmdSscaled, 3)}},
		{Op: 0b00101001000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5), cmd(arm.CmdSscaled, 2)}},
		{Op: 0b10101001000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5), cmd(arm.CmdSscaled, 3)}},
	},
	"str": {
		// STR (immediate, SIMD&FP)
		{Op: 0b00111100000000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatB), mat(arm.MatRefBase), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b01111100000000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatRefBase), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b10111100000000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatRefBase), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b11111100000000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatRefBase), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b00111100100000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatQ), mat(arm.MatRefBase), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b00111100000000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatB), mat(arm.MatRefPre)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b01111100000000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatRefPre)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b10111100000000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatRefPre)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b11111100000000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatRefPre)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b00111100100000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatQ), mat(arm.MatRefPre)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b00111101000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatB), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 10, 12)}},
		{Op: 0b01111101000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUscaled, 10, 12, 1)}},
		{Op: 0b10111101000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUscaled, 10, 12, 2)}},
		{Op: 0b11111101000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUscaled, 10, 12, 3)}},
		{Op: 0b00111101100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatQ), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUscaled, 10, 12, 4)}},
		// STR (immediate)
		{Op: 0b10111000000000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b11111000000000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefBase), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b10111000000000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefPre)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b11111000000000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefPre)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b10111001000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUscaled, 10, 12, 2)}},
		{Op: 0b11111001000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUscaled, 10, 12, 3)}},
		// STR (register, SIMD&FP)
		{Op: 0b00111100001000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatB), mat(arm.MatRefIndex)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdExtendsX), alt2(12, 0, 0)}},
		{Op: 0b01111100001000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatRefIndex)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdExtendsX), alt2(12, 0, 1)}},
		{Op: 0b10111100001000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatRefIndex)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdExtendsX), alt2(12, 0, 2)}},
		{Op: 0b11111100001000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatRefIndex)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdExtendsX), alt2(12, 0, 3)}},
		{Op: 0b00111100101000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatQ), mat(arm.MatRefIndex)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdExtendsX), alt2(12, 0, 4)}},
		// STR (register)
		{Op: 0b10111000001000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefIndex)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdExtendsX), alt2(12, 0, 2)}},
		{Op: 0b11111000001000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefIndex)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdExtendsX), alt2(12, 0, 3)}},
	},
	"strb": {
		// STRB (immediate)
		{Op: 0b00111000000000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b00111000000000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefPre)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b00111001000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 10, 12)}},
		// STRB (register)
		{Op: 0b00111000001000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefIndex)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdExtendsX), alt2(12, 0, 0)}},
	},
	"strh": {
		// STRH (immediate)
		{Op: 0b01111000000000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b01111000000000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefPre)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b01111001000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUscaled, 10, 12, 1)}},
		// STRH (register)
		{Op: 0b01111000001000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefIndex)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdExtendsX), alt2(12, 0, 1)}},
	},
	"stset": {
		{Op: 0b10111000001000000011000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
		{Op: 0b11111000001000000011000000011111,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"stsetb": {
		{Op: 0b00111000001000000011000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"stseth": {
		{Op: 0b01111000001000000011000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"stsetl": {
		{Op: 0b10111000011000000011000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
		{Op: 0b11111000011000000011000000011111,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"stsetlb": {
		{Op: 0b00111000011000000011000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"stsetlh": {
		{Op: 0b01111000011000000011000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"stsmax": {
		{Op: 0b10111000001000000100000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
		{Op: 0b11111000001000000100000000011111,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"stsmaxb": {
		{Op: 0b00111000001000000100000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"stsmaxh": {
		{Op: 0b01111000001000000100000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"stsmaxl": {
		{Op: 0b10111000011000000100000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
		{Op: 0b11111000011000000100000000011111,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"stsmaxlb": {
		{Op: 0b00111000011000000100000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"stsmaxlh": {
		{Op: 0b01111000011000000100000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"stsmin": {
		{Op: 0b10111000001000000101000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
		{Op: 0b11111000001000000101000000011111,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"stsminb": {
		{Op: 0b00111000001000000101000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"stsminh": {
		{Op: 0b01111000001000000101000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"stsminl": {
		{Op: 0b10111000011000000101000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
		{Op: 0b11111000011000000101000000011111,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"stsminlb": {
		{Op: 0b00111000011000000101000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"stsminlh": {
		{Op: 0b01111000011000000101000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"sttr": {
		{Op: 0b10111000000000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b11111000000000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
	},
	"sttrb": {
		{Op: 0b00111000000000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
	},
	"sttrh": {
		{Op: 0b01111000000000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
	},
	"stumax": {
		{Op: 0b10111000001000000110000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
		{Op: 0b11111000001000000110000000011111,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"stumaxb": {
		{Op: 0b00111000001000000110000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"stumaxh": {
		{Op: 0b01111000001000000110000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"stumaxl": {
		{Op: 0b10111000011000000110000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
		{Op: 0b11111000011000000110000000011111,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"stumaxlb": {
		{Op: 0b00111000011000000110000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"stumaxlh": {
		{Op: 0b01111000011000000110000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"stumin": {
		{Op: 0b10111000001000000111000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
		{Op: 0b11111000001000000111000000011111,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"stuminb": {
		{Op: 0b00111000001000000111000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"stuminh": {
		{Op: 0b01111000001000000111000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"stuminl": {
		{Op: 0b10111000011000000111000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
		{Op: 0b11111000011000000111000000011111,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"stuminlb": {
		{Op: 0b00111000011000000111000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"stuminlh": {
		{Op: 0b01111000011000000111000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR5)}},
	},
	"stur": {
		// STUR (SIMD&FP)
		{Op: 0b00111100000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatB), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b01111100000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b10111100000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b11111100000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b00111100100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatQ), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		// STUR
		{Op: 0b10111000000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
		{Op: 0b11111000000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
	},
	"sturb": {
		{Op: 0b00111000000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
	},
	"sturh": {
		{Op: 0b01111000000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatRefOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdSbits)}},
	},
	"stxp": {
		{Op: 0b10001000001000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5)}},
		{Op: 0b11001000001000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR10), cmd(arm.CmdR5)}},
	},
	"stxr": {
		{Op: 0b10001000000000000111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11001000000000000111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"stxrb": {
		{Op: 0b00001000000000000111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"stxrh": {
		{Op: 0b01001000000000000111110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"sub": {
		// SUB (shifted register)
		{Op: 0b01001011000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW), mat(arm.MatEnd), mat(arm.MatMod, arm.SymShifts)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRotates), cmd(arm.CmdUbits, 10, 5)}},
		{Op: 0b11001011000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatX), mat(arm.MatEnd), mat(arm.MatMod, arm.SymShifts)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRotates), cmd(arm.CmdUbits, 10, 6)}},
		// SUB (extended register)
		{Op: 0b01001011001000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatWSP), mat(arm.MatWSP), mat(arm.MatW), mat(arm.MatEnd), mat(arm.MatMod, arm.SymExtends)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdExtendsW), cmd(arm.CmdUrange, 10, 0, 4)}},
		{Op: 0b11001011001000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatXSP), mat(arm.MatXSP), mat(arm.MatW), mat(arm.MatEnd), mat(arm.MatMod, arm.SymExtendsW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdExtendsX), cmd(arm.CmdUrange, 10, 0, 4)}},
		{Op: 0b11001011001000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatXSP), mat(arm.MatXSP), mat(arm.MatX), mat(arm.MatEnd), mat(arm.MatMod, arm.SymExtendsX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdExtendsX), cmd(arm.CmdUrange, 10, 0, 4)}},
		// SUB (immediate)
		{Op: 0b01010001000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatWSP), mat(arm.MatWSP), mat(arm.MatImm), mat(arm.MatEnd), mat(arm.MatLitMod, arm.SymLSL)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 10, 12), alt2(22, 0, 12)}},
		{Op: 0b11010001000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatXSP), mat(arm.MatXSP), mat(arm.MatImm), mat(arm.MatEnd), mat(arm.MatLitMod, arm.SymLSL)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 10, 12), alt2(22, 0, 12)}},
		// SUB (vector)
		{Op: 0b01111110111000001000010000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00101110001000001000010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011000001000010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101000001000010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110111000001000010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"subhn": {
		{Op: 0b00001110001000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.BYTE), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00001110011000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00001110101000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"subhn2": {
		{Op: 0b01001110001000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01001110011000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01001110101000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"subs": {
		// SUBS (shifted register)
		{Op: 0b01101011000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW), mat(arm.MatEnd), mat(arm.MatMod, arm.SymShifts)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRotates), cmd(arm.CmdUbits, 10, 5)}},
		{Op: 0b11101011000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatX), mat(arm.MatEnd), mat(arm.MatMod, arm.SymShifts)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRotates), cmd(arm.CmdUbits, 10, 6)}},
		// SUBS (extended register)
		{Op: 0b01101011001000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatWSP), mat(arm.MatW), mat(arm.MatEnd), mat(arm.MatMod, arm.SymExtends)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdExtendsW), cmd(arm.CmdUrange, 10, 0, 4)}},
		{Op: 0b11101011001000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatXSP), mat(arm.MatW), mat(arm.MatEnd), mat(arm.MatMod, arm.SymExtendsW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdExtendsX), cmd(arm.CmdUrange, 10, 0, 4)}},
		{Op: 0b11101011001000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatXSP), mat(arm.MatX), mat(arm.MatEnd), mat(arm.MatMod, arm.SymExtendsX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdExtendsX), cmd(arm.CmdUrange, 10, 0, 4)}},
		// SUBS (immediate)
		{Op: 0b01110001000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatWSP), mat(arm.MatImm), mat(arm.MatEnd), mat(arm.MatLitMod, arm.SymLSL)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 10, 12), alt2(22, 0, 12)}},
		{Op: 0b11110001000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatXSP), mat(arm.MatImm), mat(arm.MatEnd), mat(arm.MatLitMod, arm.SymLSL)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 10, 12), alt2(22, 0, 12)}},
	},
	"suqadd": {
		{Op: 0b01011110001000000011100000000000,
			Match: []arm.EncOp{mat(arm.MatB), mat(arm.MatB)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01011110011000000011100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01011110101000000011100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01011110111000000011100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001110001000000011100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110011000000011100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110101000000011100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110111000000011100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
	},
	"svc": {
		{Op: 0b11010100000000000000000000000001,
			Match: []arm.EncOp{mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdUbits, 5, 16)}},
	},
	"swp": {
		{Op: 0b10111000001000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11111000001000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"swpa": {
		{Op: 0b10111000101000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11111000101000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"swpab": {
		{Op: 0b00111000101000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"swpah": {
		{Op: 0b01111000101000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"swpal": {
		{Op: 0b10111000111000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11111000111000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"swpalb": {
		{Op: 0b00111000111000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"swpalh": {
		{Op: 0b01111000111000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"swpb": {
		{Op: 0b00111000001000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"swph": {
		{Op: 0b01111000001000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"swpl": {
		{Op: 0b10111000011000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b11111000011000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"swplb": {
		{Op: 0b00111000011000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"swplh": {
		{Op: 0b01111000011000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatRefBase)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR16), cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"sxtb": {
		{Op: 0b00010011000000000001110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10010011010000000001110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"sxth": {
		{Op: 0b00010011000000000011110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10010011010000000011110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"sxtl": {
		{Op: 0b00001111000010001010010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001111000100001010010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001111001000001010010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"sxtl2": {
		{Op: 0b01001111000010001010010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001111000100001010010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001111001000001010010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"sxtw": {
		{Op: 0b10010011010000000111110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"sys": {
		{Op: 0b11010101000010000000000000000000,
			Match: []arm.EncOp{mat(arm.MatImm), mat(arm.MatSymbol), mat(arm.MatSymbol), mat(arm.MatImm), mat(arm.MatEnd), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdUbits, 16, 3), cmd(arm.CmdLitList, 12, arm.SymCONTROLREGS), cmd(arm.CmdLitList, 8, arm.SymCONTROLREGS), cmd(arm.CmdUbits, 5, 3), cmd(arm.CmdR0)}},
	},
	"sysl": {
		{Op: 0b11010101001010000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatImm), mat(arm.MatSymbol), mat(arm.MatSymbol), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUbits, 16, 3), cmd(arm.CmdLitList, 12, arm.SymCONTROLREGS), cmd(arm.CmdLitList, 8, arm.SymCONTROLREGS), cmd(arm.CmdUbits, 5, 3)}},
	},
	"tbl": {
		{Op: 0b00001110000000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatRegListStatic, 2, uint8(arm.BYTE), 16), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110000000000100000000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatRegListStatic, 3, uint8(arm.BYTE), 16), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110000000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatRegListStatic, 4, uint8(arm.BYTE), 16), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatRegListStatic, 1, uint8(arm.BYTE), 16), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"tbnz": {
		{Op: 0b00110111000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatImm), mat(arm.MatOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUbits, 19, 5), cmd(arm.CmdOffset, arm.RelTbz)}},
		{Op: 0b00110111000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatImm), mat(arm.MatOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdChkUbits, 6), cmd(arm.CmdUslice, 19, 5, 0), cmd(arm.CmdUslice, 31, 1, 5), cmd(arm.CmdAdv), cmd(arm.CmdOffset, arm.RelTbz)}},
	},
	"tbx": {
		{Op: 0b00001110000000000011000000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatRegListStatic, 2, uint8(arm.BYTE), 16), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110000000000101000000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatRegListStatic, 3, uint8(arm.BYTE), 16), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110000000000111000000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatRegListStatic, 4, uint8(arm.BYTE), 16), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110000000000001000000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatRegListStatic, 1, uint8(arm.BYTE), 16), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"tbz": {
		{Op: 0b00110110000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatImm), mat(arm.MatOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdUbits, 19, 5), cmd(arm.CmdOffset, arm.RelTbz)}},
		{Op: 0b00110110000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatImm), mat(arm.MatOffset)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdChkUbits, 6), cmd(arm.CmdUslice, 19, 5, 0), cmd(arm.CmdUslice, 31, 1, 5), cmd(arm.CmdAdv), cmd(arm.CmdOffset, arm.RelTbz)}},
	},
	"tlbi": {
		{Op: 0b11010101000010001000000000000000,
			Match: []arm.EncOp{mat(arm.MatSymbol), mat(arm.MatEnd), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdLitList, 5, arm.SymTLBIOPS), cmd(arm.CmdR0)}},
	},
	"trn1": {
		{Op: 0b00001110000000000010100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110010000000010100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110100000000010100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110110000000010100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"trn2": {
		{Op: 0b00001110000000000110100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110010000000110100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110100000000110100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110110000000110100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"tsb": {
		{Op: 0b11010101000000110010001001011111,
			Match: []arm.EncOp{mat(arm.MatLitSymbol, uint8(arm.CSYNC))},
			Cmds:  []arm.EncOp{}},
	},
	"tst": {
		// TST (immediate)
		{Op: 0b01110010000000000000000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5), cmd(arm.CmdSpecial, 10, arm.SpecialImmLogical32)}},
		{Op: 0b11110010000000000000000000011111,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5), cmd(arm.CmdSpecial, 10, arm.SpecialImmLogical64)}},
		// TST (shifted register)
		{Op: 0b01101010000000000000000000011111,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatEnd), mat(arm.MatMod, arm.SymRotates)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRotates), cmd(arm.CmdUbits, 10, 5)}},
		{Op: 0b11101010000000000000000000011111,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatEnd), mat(arm.MatMod, arm.SymRotates)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRotates), cmd(arm.CmdUbits, 10, 6)}},
	},
	"uaba": {
		{Op: 0b00101110001000000111110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011000000111110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101000000111110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"uabal": {
		{Op: 0b00101110001000000101000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00101110011000000101000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00101110101000000101000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"uabal2": {
		{Op: 0b01101110001000000101000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.BYTE), 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01101110011000000101000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01101110101000000101000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"uabd": {
		{Op: 0b00101110001000000111010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011000000111010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101000000111010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"uabdl": {
		{Op: 0b00101110001000000111000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00101110011000000111000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00101110101000000111000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"uabdl2": {
		{Op: 0b01101110001000000111000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.BYTE), 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01101110011000000111000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01101110101000000111000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"uadalp": {
		{Op: 0b00101110001000000110100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011000000110100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101000000110100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.QWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
	},
	"uaddl": {
		{Op: 0b00101110001000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00101110011000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00101110101000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"uaddl2": {
		{Op: 0b01101110001000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.BYTE), 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01101110011000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01101110101000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"uaddlp": {
		{Op: 0b00101110001000000010100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011000000010100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101000000010100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.QWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
	},
	"uaddlv": {
		{Op: 0b00101110001100000011100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011100000011100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101100000011100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
	},
	"uaddw": {
		{Op: 0b00101110001000000001000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00101110011000000001000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00101110101000000001000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"uaddw2": {
		{Op: 0b01101110001000000001000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01101110011000000001000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01101110101000000001000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"ubfiz": {
		{Op: 0b01010011000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatImm), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUnegmod, 16, 5), cmd(arm.CmdChkUsum, 5), cmd(arm.CmdUrange, 10, 1, 32)}},
		{Op: 0b11010011010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatImm), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUnegmod, 16, 6), cmd(arm.CmdChkUsum, 6), cmd(arm.CmdUrange, 10, 1, 64)}},
	},
	"ubfm": {
		{Op: 0b01010011000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatImm), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 5), cmd(arm.CmdUbits, 10, 5)}},
		{Op: 0b11010011010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatImm), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 6), cmd(arm.CmdChkUsum, 6), cmd(arm.CmdUbits, 10, 6)}},
	},
	"ubfx": {
		{Op: 0b01010011000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatImm), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 5), cmd(arm.CmdChkUsum, 5), cmd(arm.CmdUsumdec, 10, 5)}},
		{Op: 0b11010011010000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatImm), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 6), cmd(arm.CmdChkUsum, 6), cmd(arm.CmdUsumdec, 10, 6)}},
	},
	"ucvtf": {
		// UCVTF (vector, fixed-point)
		{Op: 0b01111111000000001110010000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 16), cmd(arm.CmdUsub, 16, 5, 32)}},
		{Op: 0b01111111000000001110010000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 32), cmd(arm.CmdUsub, 16, 6, 64)}},
		{Op: 0b01111111000000001110010000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 64), cmd(arm.CmdUsub, 16, 7, 128)}},
		{Op: 0b00101111000100001110010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 4, 16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101111001000001110010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 5, 32), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101111010000001110010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 6, 64), cmd(arm.CmdRwidth30)}},
		// UCVTF (vector, integer)
		{Op: 0b01111110011110011101100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01111110001000011101100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01111110011000011101100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00101110011110011101100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110001000011101100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011000011101100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		// UCVTF (scalar, fixed-point)
		{Op: 0b00011110110000110000000000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatW), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 32), cmd(arm.CmdUsub, 10, 6, 64)}},
		{Op: 0b00011110000000110000000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatW), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 32), cmd(arm.CmdUsub, 10, 6, 64)}},
		{Op: 0b00011110010000110000000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatW), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 32), cmd(arm.CmdUsub, 10, 6, 64)}},
		{Op: 0b10011110110000110000000000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatX), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 10, 6, 64)}},
		{Op: 0b10011110000000110000000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatX), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 10, 6, 64)}},
		{Op: 0b10011110010000110000000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatX), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 10, 6, 64)}},
		// UCVTF (scalar, integer)
		{Op: 0b00011110111000110000000000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110001000110000000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00011110011000110000000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10011110111000110000000000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10011110001000110000000000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b10011110011000110000000000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"udf": {
		{Op: 0b00000000000000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdUbits, 0, 16)}},
	},
	"udiv": {
		{Op: 0b00011010110000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b10011010110000000000100000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"udot": {
		// UDOT (by element)
		{Op: 0b00101111100000001110000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.BYTE), 8), mat(arm.MatVStaticElement, uint8(arm.BYTE), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2)}},
		{Op: 0b01101111100000001110000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStaticElement, uint8(arm.BYTE), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2)}},
		// UDOT (vector)
		{Op: 0b00101110100000001001010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.BYTE), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01101110100000001001010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.BYTE), 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"uhadd": {
		{Op: 0b00101110001000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"uhsub": {
		{Op: 0b00101110001000000010010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011000000010010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101000000010010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"umaddl": {
		{Op: 0b10011011101000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatW), mat(arm.MatW), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdR10)}},
	},
	"umax": {
		{Op: 0b00101110001000000110010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011000000110010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101000000110010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"umaxp": {
		{Op: 0b00101110001000001010010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011000001010010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101000001010010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"umaxv": {
		{Op: 0b00101110001100001010100000000000,
			Match: []arm.EncOp{mat(arm.MatB), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011100001010100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101100001010100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
	},
	"umin": {
		{Op: 0b00101110001000000110110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011000000110110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101000000110110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"uminp": {
		{Op: 0b00101110001000001010110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011000001010110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101000001010110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"uminv": {
		{Op: 0b00101110001100011010100000000000,
			Match: []arm.EncOp{mat(arm.MatB), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011100011010100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101100011010100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
	},
	"umlal": {
		// UMLAL, UMLAL2 (by element)
		{Op: 0b00101111010000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3)}},
		{Op: 0b00101111100000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2)}},
		// UMLAL, UMLAL2 (vector)
		{Op: 0b00101110001000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00101110011000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00101110101000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"umlal2": {
		// UMLAL, UMLAL2 (by element)
		{Op: 0b01101111010000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3)}},
		{Op: 0b01101111100000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2)}},
		// UMLAL, UMLAL2 (vector)
		{Op: 0b01101110001000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.BYTE), 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01101110011000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01101110101000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"umlsl": {
		// UMLSL, UMLSL2 (by element)
		{Op: 0b00101111010000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3)}},
		{Op: 0b00101111100000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2)}},
		// UMLSL, UMLSL2 (vector)
		{Op: 0b00101110001000001010000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00101110011000001010000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00101110101000001010000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"umlsl2": {
		// UMLSL, UMLSL2 (by element)
		{Op: 0b01101111010000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3)}},
		{Op: 0b01101111100000000110000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2)}},
		// UMLSL, UMLSL2 (vector)
		{Op: 0b01101110001000001010000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.BYTE), 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01101110011000001010000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01101110101000001010000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"umnegl": {
		{Op: 0b10011011101000001111110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatW), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"umov": {
		{Op: 0b00001110000000010011110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatVElement, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 17, 4)}},
		{Op: 0b00001110000000100011110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 18, 3)}},
		{Op: 0b00001110000001000011110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 19, 2)}},
		{Op: 0b01001110000010000011110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatVElement, uint8(arm.QWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 20, 1)}},
	},
	"umsubl": {
		{Op: 0b10011011101000001000000000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatW), mat(arm.MatW), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdR10)}},
	},
	"umulh": {
		{Op: 0b10011011110000000111110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatX), mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"umull": {
		// UMULL, UMULL2 (by element)
		{Op: 0b00101111010000001010000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3)}},
		{Op: 0b00101111100000001010000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2)}},
		// UMULL, UMULL2 (vector)
		{Op: 0b00101110001000001100000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00101110011000001100000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00101110101000001100000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		// UMULL
		{Op: 0b10011011101000000111110000000000,
			Match: []arm.EncOp{mat(arm.MatX), mat(arm.MatW), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"umull2": {
		// UMULL, UMULL2 (by element)
		{Op: 0b01101111010000001010000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVElement, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRLo16), cmd(arm.CmdUfields11, 3)}},
		{Op: 0b01101111100000001010000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVElement, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUfields11, 2)}},
		// UMULL, UMULL2 (vector)
		{Op: 0b01101110001000001100000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.BYTE), 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01101110011000001100000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01101110101000001100000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"uqadd": {
		{Op: 0b01111110001000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatB), mat(arm.MatB), mat(arm.MatB)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01111110011000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01111110101000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01111110111000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00101110001000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110111000000000110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"uqrshl": {
		{Op: 0b01111110001000000101110000000000,
			Match: []arm.EncOp{mat(arm.MatB), mat(arm.MatB), mat(arm.MatB)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01111110011000000101110000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01111110101000000101110000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01111110111000000101110000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00101110001000000101110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011000000101110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101000000101110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110111000000101110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"uqrshrn": {
		{Op: 0b01111111000000001001110000000000,
			Match: []arm.EncOp{mat(arm.MatB), mat(arm.MatH), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 8), cmd(arm.CmdUsub, 16, 4, 16)}},
		{Op: 0b01111111000000001001110000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatS), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 16), cmd(arm.CmdUsub, 16, 5, 32)}},
		{Op: 0b01111111000000001001110000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatD), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 32), cmd(arm.CmdUsub, 16, 6, 64)}},
		{Op: 0b00101111000010001001110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.BYTE), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 3, 8)}},
		{Op: 0b00101111000100001001110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 4, 16)}},
		{Op: 0b00101111001000001001110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 5, 32)}},
	},
	"uqrshrn2": {
		{Op: 0b01101111000010001001110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 3, 8)}},
		{Op: 0b01101111000100001001110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 4, 16)}},
		{Op: 0b01101111001000001001110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 5, 32)}},
	},
	"uqshl": {
		// UQSHL (immediate)
		{Op: 0b01111111000010000111010000000000,
			Match: []arm.EncOp{mat(arm.MatB), mat(arm.MatB), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 3)}},
		{Op: 0b01111111000100000111010000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 4)}},
		{Op: 0b01111111001000000111010000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 5)}},
		{Op: 0b01111111010000000111010000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 6)}},
		{Op: 0b00101111000010000111010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 3), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101111000100000111010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 4), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101111001000000111010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101111010000000111010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 6), cmd(arm.CmdRwidth30)}},
		// UQSHL (register)
		{Op: 0b01111110001000000100110000000000,
			Match: []arm.EncOp{mat(arm.MatB), mat(arm.MatB), mat(arm.MatB)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01111110011000000100110000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01111110101000000100110000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01111110111000000100110000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00101110001000000100110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011000000100110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101000000100110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110111000000100110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"uqshrn": {
		{Op: 0b01111111000000001001010000000000,
			Match: []arm.EncOp{mat(arm.MatB), mat(arm.MatH), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 8), cmd(arm.CmdUsub, 16, 4, 16)}},
		{Op: 0b01111111000000001001010000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatS), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 16), cmd(arm.CmdUsub, 16, 5, 32)}},
		{Op: 0b01111111000000001001010000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatD), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 32), cmd(arm.CmdUsub, 16, 6, 64)}},
		{Op: 0b00101111000010001001010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.BYTE), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 3, 8)}},
		{Op: 0b00101111000100001001010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 4, 16)}},
		{Op: 0b00101111001000001001010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 5, 32)}},
	},
	"uqshrn2": {
		{Op: 0b01101111000010001001010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 3, 8)}},
		{Op: 0b01101111000100001001010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 4, 16)}},
		{Op: 0b01101111001000001001010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 5, 32)}},
	},
	"uqsub": {
		{Op: 0b01111110001000000010110000000000,
			Match: []arm.EncOp{mat(arm.MatB), mat(arm.MatB), mat(arm.MatB)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01111110011000000010110000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01111110101000000010110000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01111110111000000010110000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00101110001000000010110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011000000010110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101000000010110000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110111000000010110000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"uqxtn": {
		{Op: 0b01111110001000010100100000000000,
			Match: []arm.EncOp{mat(arm.MatB), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01111110011000010100100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01111110101000010100100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00101110001000010100100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.BYTE), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00101110011000010100100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00101110101000010100100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"uqxtn2": {
		{Op: 0b01101110001000010100100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.WORD), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01101110011000010100100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01101110101000010100100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"urecpe": {
		{Op: 0b00001110101000011100100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
	},
	"urhadd": {
		{Op: 0b00101110001000000001010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011000000001010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101000000001010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"urshl": {
		{Op: 0b01111110111000000101010000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00101110001000000101010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011000000101010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101000000101010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110111000000101010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"urshr": {
		{Op: 0b01111111000000000010010000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 64), cmd(arm.CmdUsub, 16, 7, 128)}},
		{Op: 0b00101111000010000010010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 3, 8), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101111000100000010010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 4, 16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101111001000000010010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 5, 32), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101111010000000010010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 6, 64), cmd(arm.CmdRwidth30)}},
	},
	"ursqrte": {
		{Op: 0b00101110101000011100100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
	},
	"ursra": {
		{Op: 0b01111111000000000011010000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 64), cmd(arm.CmdUsub, 16, 7, 128)}},
		{Op: 0b00101111000010000011010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 3, 8), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101111000100000011010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 4, 16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101111001000000011010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 5, 32), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101111010000000011010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 6, 64), cmd(arm.CmdRwidth30)}},
	},
	"ushl": {
		{Op: 0b01111110111000000100010000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00101110001000000100010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011000000100010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101000000100010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110111000000100010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"ushll": {
		{Op: 0b00101111000010001010010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 8), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 3)}},
		{Op: 0b00101111000100001010010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 4)}},
		{Op: 0b00101111001000001010010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 5)}},
	},
	"ushll2": {
		{Op: 0b01101111000010001010010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 3)}},
		{Op: 0b01101111000100001010010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 4)}},
		{Op: 0b01101111001000001010010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUbits, 16, 5)}},
	},
	"ushr": {
		{Op: 0b01111111000000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 64), cmd(arm.CmdUsub, 16, 7, 128)}},
		{Op: 0b00101111000010000000010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 3, 8), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101111000100000000010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 4, 16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101111001000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 5, 32), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101111010000000000010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 6, 64), cmd(arm.CmdRwidth30)}},
	},
	"usqadd": {
		{Op: 0b01111110001000000011100000000000,
			Match: []arm.EncOp{mat(arm.MatB), mat(arm.MatB)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01111110011000000011100000000000,
			Match: []arm.EncOp{mat(arm.MatH), mat(arm.MatH)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01111110101000000011100000000000,
			Match: []arm.EncOp{mat(arm.MatS), mat(arm.MatS)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01111110111000000011100000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00101110001000000011100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110011000000011100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110101000000011100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101110111000000011100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdRwidth30)}},
	},
	"usra": {
		{Op: 0b01111111000000000001010000000000,
			Match: []arm.EncOp{mat(arm.MatD), mat(arm.MatD), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdChkUrange1, 64), cmd(arm.CmdUsub, 16, 7, 128)}},
		{Op: 0b00101111000010000001010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 3, 8), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101111000100000001010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 4, 16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101111001000000001010000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 5, 32), cmd(arm.CmdRwidth30)}},
		{Op: 0b00101111010000000001010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdUsub, 16, 6, 64), cmd(arm.CmdRwidth30)}},
	},
	"usubl": {
		{Op: 0b00101110001000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00101110011000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00101110101000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"usubl2": {
		{Op: 0b01101110001000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.BYTE), 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01101110011000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01101110101000000010000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"usubw": {
		{Op: 0b00101110001000000011000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00101110011000000011000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b00101110101000000011000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"usubw2": {
		{Op: 0b01101110001000000011000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01101110011000000011000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
		{Op: 0b01101110101000000011000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16)}},
	},
	"uxtb": {
		{Op: 0b01010011000000000001110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"uxth": {
		{Op: 0b01010011000000000011110000000000,
			Match: []arm.EncOp{mat(arm.MatW), mat(arm.MatW)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"uxtl": {
		{Op: 0b00101111000010001010010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00101111000100001010010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00101111001000001010010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"uxtl2": {
		{Op: 0b01101111000010001010010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.BYTE), 16)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01101111000100001010010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.WORD), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01101111001000001010010000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"uzp1": {
		{Op: 0b00001110000000000001100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110010000000001100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110100000000001100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110110000000001100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"uzp2": {
		{Op: 0b00001110000000000101100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110010000000101100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110100000000101100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110110000000101100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"wfe": {
		{Op: 0b11010101000000110010000001011111,
			Match: []arm.EncOp{},
			Cmds:  []arm.EncOp{}},
	},
	"wfi": {
		{Op: 0b11010101000000110010000001111111,
			Match: []arm.EncOp{},
			Cmds:  []arm.EncOp{}},
	},
	"xar": {
		{Op: 0b11001110100000000000000000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatImm)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdUbits, 10, 6)}},
	},
	"xpacd": {
		{Op: 0b11011010110000010100011111100000,
			Match: []arm.EncOp{mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0)}},
	},
	"xpaci": {
		{Op: 0b11011010110000010100001111100000,
			Match: []arm.EncOp{mat(arm.MatX)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0)}},
	},
	"xpaclri": {
		{Op: 0b11010101000000110010000011111111,
			Match: []arm.EncOp{},
			Cmds:  []arm.EncOp{}},
	},
	"xtn": {
		{Op: 0b00001110001000010010100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.BYTE), 8), mat(arm.MatVStatic, uint8(arm.WORD), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001110011000010010100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 4), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b00001110101000010010100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"xtn2": {
		{Op: 0b01001110001000010010100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.BYTE), 16), mat(arm.MatVStatic, uint8(arm.WORD), 8)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001110011000010010100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.WORD), 8), mat(arm.MatVStatic, uint8(arm.DWORD), 4)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
		{Op: 0b01001110101000010010100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.DWORD), 4), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5)}},
	},
	"yield": {
		{Op: 0b11010101000000110010000000111111,
			Match: []arm.EncOp{},
			Cmds:  []arm.EncOp{}},
	},
	"zip1": {
		{Op: 0b00001110000000000011100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110010000000011100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110100000000011100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110110000000011100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
	"zip2": {
		{Op: 0b00001110000000000111100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE)), mat(arm.MatV, uint8(arm.BYTE))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110010000000111100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD)), mat(arm.MatV, uint8(arm.WORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110100000000111100000000000,
			Match: []arm.EncOp{mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD)), mat(arm.MatV, uint8(arm.DWORD))},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
		{Op: 0b00001110110000000111100000000000,
			Match: []arm.EncOp{mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2), mat(arm.MatVStatic, uint8(arm.QWORD), 2)},
			Cmds:  []arm.EncOp{cmd(arm.CmdR0), cmd(arm.CmdR5), cmd(arm.CmdR16), cmd(arm.CmdRwidth30)}},
	},
}
